{"version":3,"sources":["components/atomic-ui/atoms/search-button/search-button.tsx","components/atomic-ui/atoms/search-input/search-input.tsx","components/atomic-ui/molecules/search-bar/search-bar.tsx","components/atomic-ui/organisms/header/header.tsx","components/atomic-ui/atoms/job-input/job-input.tsx","components/atomic-ui/atoms/accordion/accordion.tsx","components/atomic-ui/atoms/checkbox/checkbox.tsx","components/atomic-ui/molecules/accordion-checkbox/accordion-checkbox.tsx","components/atomic-ui/organisms/side-nav/side-nav.tsx","components/atomic-ui/atoms/job-title/job-title.tsx","components/atomic-ui/atoms/job-detail/job-type.tsx","components/atomic-ui/atoms/job-detail/job-detail.tsx","components/atomic-ui/molecules/job-details/job-details.tsx","components/atomic-ui/molecules/job-card-header/card-header.tsx","components/atomic-ui/atoms/job-description/job-description.tsx","components/atomic-ui/atoms/job-skill/job-skill.tsx","components/atomic-ui/molecules/job-skill-list/job-skill-list.tsx","components/atomic-ui/atoms/job-action/job-action.tsx","components/atomic-ui/molecules/job-card-body/card-body.tsx","components/atomic-ui/organisms/job-card/job-card.tsx","components/atomic-ui/organisms/job-list/job-list.tsx","components/templates/job-board.tsx","components/pages/board.tsx","utilities/utilities.tsx","views/board.tsx","reportWebVitals.js","index.js"],"names":["SearchButton","type","className","SearchInput","input","handleSearch","placeholder","onChange","value","SearchBar","searchInput","Header","JobInput","Accordion","id","label","content","useState","checked","setIsChecked","icon","defaultChecked","htmlFor","Checkbox","clearFilter","parent","setValue","useEffect","name","e","prevState","AccordionCheckbox","options","map","option","index","SideNav","clearFilters","accordionOptions","active","setActiveNav","onClick","JobTitle","props","position","JobDetailsEnum","JobDetail","description","JobDetails","company","location","contract","CardHeader","JobDescription","JobSkill","skill","SkillList","skills","JobAction","href","CardBody","JobCard","JobList","jobs","hasResults","length","job","JobBoard","Board","defaultProps","getLabelOptions","onSelectFilterOption","data","reduce","acc","some","Array","isArray","forEach","o","includes","push","getAccordionFilters","accordionFilters","Map","set","getAccordionOptions","clearFilterActive","accordionFiltersMap","keys","getJobsByFilters","key","filter","filteredOption","keyword","toLowerCase","indexOf","checkJobsFilter","BoardView","setInput","setJobs","filterKeywords","setfilterKeywords","setClearFilter","filteredOptions","filtered","flat","filteresJobs","arr","isUnique","arr1","isUniqueValue","obj","uniqueJobs","getFilteredJobsByOption","values","optionSelected","target","getAttribute","get","newKeys","prevKeys","userInput","checkPositionAndCompany","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4vRAUeA,EARM,WACnB,OACE,wBAAQC,KAAK,SAASC,UAAU,gBAAhC,SACE,mBAAGA,UAAU,qBCMJC,G,MAJK,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,aAC1B,OAAO,uBAAOJ,KAAK,OAAOC,UAAU,cAAcI,YAAY,4BAA4BC,SAAUF,EAAcG,MAAOJ,MCU9GK,G,MATG,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,YAAaL,EAA0B,EAA1BA,aAC9B,OACI,sBAAKH,UAAU,SAAf,UACI,cAAC,EAAD,IACA,cAAC,EAAD,CAAaE,MAAOM,EAAaL,aAAcA,SCE5CM,EARA,SAAC,GAA0C,IAAxCD,EAAuC,EAAvCA,YAAaL,EAA0B,EAA1BA,aAC7B,OACE,qBAAKH,UAAU,iBAAf,SACE,cAAC,EAAD,CAAWQ,YAAaA,EAAaL,aAAcA,OCC1CO,G,MAJE,SAAC,GAAoC,IAAlCR,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,aACvB,OAAO,uBAAOJ,KAAK,OAAOC,UAAU,WAAWI,YAAY,sCAAsCC,SAAUF,EAAcG,MAAOJ,MCmBrHS,G,MAlBG,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,GAAIC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,QAC5B,EAAgCC,oBAAS,GAAzC,mBAAOC,EAAP,KAAgBC,EAAhB,KAEMC,EAAOF,EAAU,gBAAkB,kBAEzC,OACI,qBAAKhB,UAAU,YAAf,SACI,gCACI,uBAAOD,KAAK,WAAWa,GAAIA,EAAIZ,UAAU,kBAAkBmB,eAAgBH,EAASX,SAAU,kBAAMY,GAAcD,MAClH,wBAAOI,QAASR,EAAIZ,UAAU,kBAA9B,UAAiDa,EAAM,mBAAGb,UAAS,cAASkB,QAC5E,qBAAKlB,UAAU,oBAAf,SACKc,WCONO,G,MAtBE,SAAC,GAA4D,IAA1DR,EAAyD,EAAzDA,MAAOS,EAAkD,EAAlDA,YAAaC,EAAqC,EAArCA,OAAQlB,EAA6B,EAA7BA,SAC5C,EAA0BU,oBAAS,GAAnC,mBAAOT,EAAP,KAAckB,EAAd,KAWA,OAJAC,qBAAU,WACJH,GAAaE,GAAS,KACzB,CAACF,IAGA,gCACI,uBAAMtB,UAAU,WAAhB,UACI,uBAAOA,UAAU,iBAAiBD,KAAK,WAAW2B,KAAMb,EAAO,cAAaU,EAAQP,QAASV,EAAOD,SAZ5F,SAACsB,GACjBH,GAAS,SAAAI,GAAS,OAAKA,KACvBvB,EAASsB,MAWAd,SCCFgB,G,MAjBW,SAAC,GAAgE,IAE7DN,EAFDX,EAA6D,EAA7DA,GAAIC,EAAyD,EAAzDA,MAAOS,EAAkD,EAAlDA,YAAaQ,EAAqC,EAArCA,QAUjD,OACI,qBAAK9B,UAAU,qBAAf,SACI,cAAC,EAAD,CAAWY,GAAIA,EAAIC,MAAOA,EAAOC,SAVfS,EAUyCV,EATxD,qBAAIb,UAAU,eAAd,cACH8B,EAAQC,KAAI,SAACC,EAAQC,GACjB,OAAO,oBAAIjC,UAAU,YAAd,SAAsC,cAAC,EAAD,CAAsBa,MAAOmB,EAAOnB,MAAOR,SAAU2B,EAAO3B,SAAUkB,OAAQA,EAAQD,YAAaA,GAApFW,IAAtBA,gBC0CvCC,G,MAvCC,SAAC,GAA0E,IAAxE1B,EAAuE,EAAvEA,YAAaL,EAA0D,EAA1DA,aAAcgC,EAA4C,EAA5CA,aAAcC,EAA8B,EAA9BA,iBAExD,EAA+BrB,oBAAS,GAAxC,mBAAOsB,EAAP,KAAeC,EAAf,KAUA,OACI,qCACI,sBAAKtC,UAAS,mBAAcqC,EAAS,SAAW,IAAhD,UACI,sBAAKrC,UAAS,oBAAeqC,EAAS,SAAW,IAAME,QAPjD,WACdD,GAAa,IAML,UACI,sBAAMtC,UAAU,QAChB,sBAAMA,UAAU,QAChB,sBAAMA,UAAU,WAEpB,sBAAKA,UAAU,mBAAf,UACI,sBAAKA,UAAU,iBAAf,UACI,yDACA,mBAAGuC,QAASJ,EAAZ,2BACA,cAAC,EAAD,CAAUjC,MAAOM,EAAaL,aAAcA,OAG5CiC,EAAiBL,KAAI,SAACC,GAClB,OAAO,cAAC,EAAD,CAAmCpB,GAAIoB,EAAOpB,GAAIC,MAAOmB,EAAOnB,MAAOS,YAAaU,EAAOV,YAAaQ,QAASE,EAAOF,SAAhGE,EAAOpB,aAKtD,qBAAKZ,UAAS,2BAAsBqC,EAAS,SAAW,MACxD,mBAAGrC,UAAU,eAAeuC,QA9BX,WACrBD,GAAa,IA6BT,+BCrCGE,G,MALE,SAACC,GAChB,IAAQC,EAAaD,EAAbC,SACR,OAAO,oBAAI1C,UAAU,QAAd,SAAuB0C,MCPnBC,EACH,UADGA,EAEF,WAFEA,EAGF,WAHEA,EAIN,OCmBQC,G,MAfG,SAACH,GACf,IAAQ1C,EAAsB0C,EAAtB1C,KAAM8C,EAAgBJ,EAAhBI,YAEd,OAAQ9C,GACJ,KAAK4C,EACD,OAAO,sBAAK3C,UAAU,gCAAf,UAA+C,mBAAGA,UAAU,yBAA2B,+BAAO6C,OACzG,KAAKF,EACD,OAAO,sBAAK3C,UAAU,iCAAf,UAAgD,mBAAGA,UAAU,+BAAiC,+BAAO6C,OAChH,KAAKF,EACD,OAAO,sBAAK3C,UAAU,iCAAf,UAAgD,mBAAGA,UAAU,+BAAiC,+BAAO6C,OAChH,KAAKF,EACD,OAAO,qBAAK3C,UAAU,6BAAf,SAA4C,+BAAO6C,SCEvDC,G,MAXI,SAACL,GAChB,IAAQM,EAAgCN,EAAhCM,QAASC,EAAuBP,EAAvBO,SAAUC,EAAaR,EAAbQ,SAC3B,OACI,sBAAKjD,UAAU,cAAf,UACI,cAAC,EAAD,CAAWD,KAAM4C,EAAwBE,YAAaE,IACtD,cAAC,EAAD,CAAWhD,KAAM4C,EAAyBE,YAAaG,IACvD,cAAC,EAAD,CAAWjD,KAAM4C,EAAyBE,YAAaI,SCKpDC,G,MAVI,SAACT,GAChB,IAAQC,EAA0CD,EAA1CC,SAAUK,EAAgCN,EAAhCM,QAASC,EAAuBP,EAAvBO,SAAUC,EAAaR,EAAbQ,SACrC,OACI,sBAAKjD,UAAU,cAAf,UACI,cAAC,EAAD,CAAU0C,SAAUA,IACpB,cAAC,EAAD,CAAYK,QAASA,EAASC,SAAUA,EAAUC,SAAUA,SCLzDE,G,MALQ,SAACV,GACtB,IAAQI,EAAgBJ,EAAhBI,YACR,OAAO,qBAAK7C,UAAU,cAAf,SAA8B6C,MCGxBO,G,MALE,SAACX,GAChB,IAAQY,EAAUZ,EAAVY,MACR,OAAO,sBAAMrD,UAAU,QAAhB,SAAyBqD,MCKnBC,G,MANG,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,OAClB,OAAQ,qBAAKvD,UAAU,aAAf,SACGuD,EAAOxB,KAAI,SAACsB,EAAOpB,GAAR,OAAkB,cAAC,EAAD,CAAsBoB,MAAOA,GAAdpB,UCC1CuB,G,MARG,WAChB,OACE,mBAAGC,KAAK,GAAGzD,UAAU,YAArB,qBCiBW0D,G,MAXE,SAACjB,GACd,IAAQc,EAAwBd,EAAxBc,OAAQV,EAAgBJ,EAAhBI,YAChB,OACI,sBAAK7C,UAAU,YAAf,UACI,cAAC,EAAD,CAAgB6C,YAAaA,IAC7B,cAAC,EAAD,CAAWU,OAAQA,IACnB,cAAC,EAAD,SCDGI,G,MAVC,SAAClB,GACf,IAAQC,EAA+DD,EAA/DC,SAAUK,EAAqDN,EAArDM,QAASC,EAA4CP,EAA5CO,SAAUC,EAAkCR,EAAlCQ,SAAUM,EAAwBd,EAAxBc,OAAQV,EAAgBJ,EAAhBI,YACvD,OACE,sBAAK7C,UAAU,eAAf,UACE,cAAC,EAAD,CAAY0C,SAAUA,EAAUK,QAASA,EAASC,SAAUA,EAAUC,SAAUA,IAChF,cAAC,EAAD,CAAUM,OAAQA,EAAQV,YAAaA,SCiB9Be,G,MAnBC,SAACnB,GACb,IAAQoB,EAASpB,EAAToB,KAEFC,EAAaD,EAAKE,OAAS,EACjC,OACI,sBAAK/D,UAAU,YAAf,UACK6D,EAAK9B,KAAI,SAACiC,GACP,OAAO,cAAC,EAAD,CAAsBtB,SAAUsB,EAAItB,SAAUK,QAASiB,EAAIjB,QAASC,SAAUgB,EAAIhB,SAAUC,SAAUe,EAAIf,SAAUM,OAAQS,EAAIT,OAAQV,YAAamB,EAAInB,aAA3ImB,EAAIpD,QAE3BkD,GACE,sBAAK9D,UAAU,aAAf,UACI,6CACA,iFCULiE,EAhBE,SAACxB,GAChB,IAAQoB,EAAoEpB,EAApEoB,KAAM1B,EAA8DM,EAA9DN,aAAcC,EAAgDK,EAAhDL,iBAAkB5B,EAA8BiC,EAA9BjC,YAAaL,EAAiBsC,EAAjBtC,aAC3D,OACE,sBAAKH,UAAU,QAAf,UACE,mCACE,qBAAKA,UAAU,WACf,cAAC,EAAD,CAAQQ,YAAaA,EAAaL,aAAcA,OAElD,sBAAKH,UAAU,aAAf,UACE,cAAC,EAAD,CAASmC,aAAcA,EAAcC,iBAAkBA,EAAkB5B,YAAaA,EAAaL,aAAcA,IACjH,cAAC,EAAD,CAAS0D,KAAMA,WCXjBK,G,MAAQ,SAACzB,GACX,IAAQoB,EAAoEpB,EAApEoB,KAAM1B,EAA8DM,EAA9DN,aAAcC,EAAgDK,EAAhDL,iBAAkB5B,EAA8BiC,EAA9BjC,YAAaL,EAAiBsC,EAAjBtC,aAC3D,OAAO,cAAC,EAAD,CAAU0D,KAAMA,EAAM1B,aAAcA,EAAcC,iBAAkBA,EAAkB5B,YAAaA,EAAaL,aAAcA,MAGzI+D,EAAMC,aAAe,CACjBN,KAAM,GACNzB,iBAAkB,IAGP8B,Q,OCrBTE,EAAkB,SAACvD,EAAOwD,GAC5B,OAAOC,EAAKC,QAAO,SAACC,EAAKxC,GAWrB,OAVKwC,EAAIC,MAAK,SAAA9C,GAAC,OAAIA,EAAEd,QAAUmB,EAAOnB,QAC/B6D,MAAMC,QAAQ3C,EAAOnB,IAEpBmB,EAAOnB,GAAO+D,SAAQ,SAAAC,GACbL,EAAIC,MAAK,SAAA9C,GAAC,OAAIA,EAAEd,MAAMiE,SAASD,OAChCL,EAAIO,KAAK,CAAElE,MAAOgE,EAAGxE,SAAUgE,OAIvCG,EAAIO,KAAK,CAAElE,MAAOmB,EAAOnB,GAAQR,SAAUgE,KAC5CG,IACR,KAGMQ,EAAsB,WAC/B,IAAMC,EAAmB,IAAIC,IAO7B,OALAD,EAAiBE,IAAI,WAAY,IACjCF,EAAiBE,IAAI,WAAY,IACjCF,EAAiBE,IAAI,QAAS,IAC9BF,EAAiBE,IAAI,SAAU,IAExBF,GAGEG,EAAsB,SAACf,EAAsBgB,GACtD,IAAMC,EAAsBN,IAG5B,OAFsB,YAAOM,EAAoBC,QAEzBxD,KAAI,SAACC,EAAQC,GACjC,MAAO,CAAErB,GAAG,GAAD,OAAKqB,GAASpB,MAAOmB,EAAQV,YAAa+D,EAAmBvD,QAASsC,EAAgBpC,EAAQqC,QAsB3GmB,EAAmB,SAAClF,EAAOmF,GAC7B,OAAOnF,EAAMiE,QAAO,SAACC,EAAKkB,GACtB,IAAIC,EAZY,SAACD,EAAQE,GAC7B,OAAOtB,EAAKoB,QAAO,SAAC1B,GAEhB,OAAGU,MAAMC,QAAQX,EAAI0B,IACV1B,EAAI0B,GAAQjB,MAAK,SAAA9C,GAAC,OAAIA,EAAEmD,SAASc,MAErC5B,EAAI0B,GAAQG,cAAcC,QAAQF,EAAQC,gBAAkB,KAM9CE,CAAgBN,EAAKC,GAE1C,OADAlB,EAAIO,KAAKY,GACFnB,IACR,KCDQwB,G,YArDG,WACd,MAA0BjF,mBAAS,IAAnC,mBAAOb,EAAP,KAAc+F,EAAd,KACA,EAAwBlF,mBAASuD,GAAjC,mBAAOT,EAAP,KAAaqC,EAAb,KACA,EAA4CnF,mBAASiE,GAArD,mBAAOmB,EAAP,KAAuBC,EAAvB,KACA,EAA4CrF,oBAAS,GAArD,mBAAOsE,EAAP,KAA0BgB,EAA1B,KA8CA,OAhBA5E,qBAAU,WACN4E,GAAe,KAChB,IAGH5E,qBAAU,WACN,IAAM6E,EDuCyB,SAACH,GACpC,IAAMI,EAAW,GAIjB,OAHAJ,EAAevB,SAAQ,SAACtE,EAAOmF,GAC3Bc,EAASxB,KAAKS,EAAiBlF,EAAOmF,GAAKe,WAfhC,SAACC,GAChB,IAAMjC,EAAM,GAQZ,OAPAiC,EAAa7B,SAAQ,SAAA8B,GACjBA,EAAI9B,SAAQ,SAAAtE,IAbE,SAACA,EAAOoG,GAC1B,IAAIC,GAAW,EAMf,OALAD,EAAI9B,SAAQ,SAAAgC,GACJA,EAAK7C,OAAS,IACd4C,EAAWA,GAAYC,EAAKnC,MAAK,SAAAI,GAAC,OAAIvE,EAAMM,KAAOiE,EAAEjE,UAGtD+F,GAOKE,CAAcvG,EAAOmG,KACpBjC,EAAIC,MAAK,SAAAqC,GAAG,OAAIA,EAAIlG,KAAON,EAAMM,OAAO4D,EAAIO,KAAKzE,SAIvDkE,EAQAuC,CAAWR,GC5CUS,CAAwBb,GAChDD,EAAQI,GAE2C,IAA/C,YAAIH,EAAec,UAAUT,OAAOzC,SACpCmC,EAAQ5B,GACR+B,GAAe,MAGpB,CAACF,IAEG,cAAC,EAAD,CAAWtC,KAAMA,EAAM1B,aAvBT,WACjBiE,EAAkB,IAAIlB,IAAIF,MAEtB,YAAImB,EAAec,UAAUT,OAAOzC,OAAS,GAC7CsC,GAAe,IAmBmCjE,iBAAkBgD,GA5C/C,SAACzD,GAC1B,IAAMuF,EAAiBvF,EAAEwF,OAAOC,aAAa,eACvCxB,EAAUjE,EAAEwF,OAAOzF,KAEzB,GAAKyE,EAAekB,IAAIH,GAAgBzC,MAAK,SAAAgB,GAAG,OAAIA,IAAQG,KAIvD,CACD,IAAM0B,EAAUnB,EAAekB,IAAIH,GAAgBxB,QAAO,SAACD,GAAD,OAASA,IAAQG,KAC3EQ,EAAkB,IAAIlB,IAAIiB,EAAehB,IAAI+B,EAAnB,YAAuCI,UANC,CAClE,IAAMC,EAAWpB,EAAekB,IAAIH,GACpCd,EAAkB,IAAIlB,IAAIiB,EAAehB,IAAI+B,EAAnB,sBAAuCK,GAAvC,CAAiD3B,UAsCmCP,GAAoBlF,aA7BrH,SAACwB,GAClB,IDayBiE,ECbnB4B,EAAY7F,EAAEwF,OAAO7G,MAC3B2F,EAASuB,GACTtB,GDWyBN,ECXA4B,EDYtBlD,EAAKoB,QAAO,SAAC1B,GAAD,OALS,SAAC4B,EAAS5B,GACtC,OAAOA,EAAItB,SAASmD,cAAcC,QAAQF,EAAQC,gBAAkB,GAAK7B,EAAIjB,QAAQ8C,cAAcC,QAAQF,EAAQC,gBAAkB,EAIzG4B,CAAwB7B,EAAS5B,SCcyGxD,YAAaN,MC7CxKwH,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.88691bb0.chunk.js","sourcesContent":["import './search-button.css'\n\nconst SearchButton = () => {\n  return (\n    <button type=\"submit\" className=\"search-button\">\n      <i className=\"fas fa-search\"></i>\n    </button>\n  );\n}\n\nexport default SearchButton;","import './search-input.css'\n\ninterface Props {\n    input: string,\n    handleSearch: (e: { target: HTMLInputElement }) => void\n}\n\nconst SearchInput = ({ input, handleSearch }: Props) => {\n    return <input type=\"text\" className=\"search-term\" placeholder=\"What are you looking for?\" onChange={handleSearch} value={input} />;\n}\n\nexport default SearchInput;","import SearchButton from \"../../atoms/search-button/search-button\";\nimport SearchInput from \"../../atoms/search-input/search-input\";\nimport './search-bar.css';\n\ninterface Props {\n    searchInput: string,\n    handleSearch: (e: { target: HTMLInputElement }) => void\n}\n\nconst SearchBar = ({ searchInput, handleSearch }: Props) => {\n    return (\n        <div className=\"search\">\n            <SearchButton />\n            <SearchInput input={searchInput} handleSearch={handleSearch} />\n        </div>\n    )\n}\n\nexport default SearchBar;","import SearchBar from \"../../molecules/search-bar/search-bar\";\n\ninterface Props {\n  searchInput: string,\n  handleSearch: (e: { target: HTMLInputElement }) => void\n}\n\nconst Header = ({ searchInput, handleSearch }: Props) => {\n  return (\n    <div className=\"header-wrapper\">\n      <SearchBar searchInput={searchInput} handleSearch={handleSearch} />\n    </div>\n  );\n}\n\nexport default Header;","import \"./job-input.css\";\n\ninterface Props {\n    input: string,\n    handleSearch: (e: { target: HTMLInputElement }) => void\n}\n\nconst JobInput = ({ input, handleSearch }: Props) => {\n    return <input type=\"text\" className=\"job-term\" placeholder=\"Software engineering, Design, Sales\" onChange={handleSearch} value={input} />;\n}\n\nexport default JobInput;","import { useState } from \"react\";\nimport \"./accordion.css\";\n\ninterface Props {\n    id: string,\n    label: string,\n    content: JSX.Element;\n}\n\nconst Accordion = ({ id, label, content }: Props) => {\n    const [checked, setIsChecked] = useState(false);\n\n    const icon = checked ? \"fa-chevron-up\" : \"fa-chevron-down\";\n\n    return (\n        <div className=\"accordion\">\n            <div>\n                <input type=\"checkbox\" id={id} className=\"accordion-input\" defaultChecked={checked} onChange={() => setIsChecked(!checked)}/>\n                <label htmlFor={id} className=\"accordion-label\">{label}<i className={`fas ${icon}`}></i></label>\n                <div className=\"accordion-content\">\n                    {content}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Accordion;","import { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport { CheckboxType } from \"./checkbox-type\"\nimport \"./checkbox.css\";\n\nconst Checkbox = ({ label, clearFilter, parent, onChange }: CheckboxType) => {\n    const [value, setValue] = useState(false);\n\n    const updateValue = (e) => {\n        setValue(prevState => !prevState);\n        onChange(e);\n    }\n\n    useEffect(() => {\n       if(clearFilter) setValue(false);\n    }, [clearFilter])\n\n    return (\n        <label>\n            <span className=\"checkbox\">\n                <input className=\"checkbox-input\" type=\"checkbox\" name={label} data-parent={parent} checked={value} onChange={updateValue} />\n                {label}\n            </span>\n        </label>\n    );\n};\n\nexport default Checkbox;","import Accordion from \"../../atoms/accordion/accordion\";\nimport Checkbox from \"../../atoms/checkbox/checkbox\";\nimport { AccordionCheckboxType } from \"./accordion-checkbox-type\";\nimport \"./accordion-checkbox.css\";\n\nconst AccordionCheckbox = ({ id, label, clearFilter, options }: AccordionCheckboxType) => {\n\n    const renderCheckboxes = (parent) => {\n        return <ul className=\"options-list\"> {\n            options.map((option, index) => {\n                return <li className=\"list-item\" key={index}><Checkbox key={index} label={option.label} onChange={option.onChange} parent={parent} clearFilter={clearFilter} /></li>\n            })}\n        </ul>\n    }\n\n    return (\n        <div className=\"accordion-checkbox\">\n            <Accordion id={id} label={label} content={renderCheckboxes(label)} />\n        </div>\n    );\n};\n\nexport default AccordionCheckbox;","import { useState } from \"react\";\nimport JobInput from \"../../atoms/job-input/job-input\";\nimport AccordionCheckbox from \"../../molecules/accordion-checkbox/accordion-checkbox\";\nimport { AccordionCheckboxType } from \"../../molecules/accordion-checkbox/accordion-checkbox-type\";\nimport \"./side-nav.css\";\n\ninterface Props {\n    clearFilters: () => void,\n    accordionOptions: AccordionCheckboxType[],\n    searchInput: string,\n    handleSearch: (e: { target: HTMLInputElement }) => void\n}\n\nconst SideNav = ({ searchInput, handleSearch, clearFilters, accordionOptions }: Props) => {\n\n    const [active, setActiveNav] = useState(false);\n\n    const handleEditFilter = () => {\n        setActiveNav(true);\n    }\n\n    const closeMenu = () => {\n        setActiveNav(false);\n    }\n\n    return (\n        <>\n            <div className={`side-nav ${active ? 'active' : ''}`}>\n                <div className={`hamburger ${active ? 'active' : ''}`} onClick={closeMenu}>\n                    <span className=\"bar\"></span>\n                    <span className=\"bar\"></span>\n                    <span className=\"bar\"></span>\n                </div>\n                <div className=\"side-nav-content\">\n                    <div className=\"filter-section\">\n                        <h3>What do you want to do?</h3>\n                        <a onClick={clearFilters}>Clear Filters</a>\n                        <JobInput input={searchInput} handleSearch={handleSearch} />\n                    </div>\n                    {\n                        accordionOptions.map((option) => {\n                            return <AccordionCheckbox key={option.id} id={option.id} label={option.label} clearFilter={option.clearFilter} options={option.options} />\n                        })\n                    }\n                </div>\n            </div>\n            <div className={`side-nav-overlay ${active ? 'active' : ''}`}></div>\n            <a className=\"edit-filters\" onClick={handleEditFilter}>Edit Filters</a>\n        </>\n    );\n};\n\nexport default SideNav;","import \"./job-title.css\"\ninterface Props {\n  position: string\n}\n\nconst JobTitle = (props: Props) => {\n  const { position } = props;\n  return <h2 className=\"title\">{position}</h2>;\n}\n\nexport default JobTitle;","export const JobDetailsEnum = {\n\tCOMPANY: \"company\",\n\tLOCATION: \"location\",\n\tCONTRACT: \"contract\",\n\tNONE: \"none\"\n}","import { JobDetailsEnum } from \"./job-type\";\nimport \"./job-detail.css\"\n\ninterface Props {\n    type: string,\n    description: string\n}\n\nconst JobDetail = (props: Props) => {\n    const { type, description } = props;\n\n    switch (type) {\n        case JobDetailsEnum.COMPANY:\n            return <div className=\"job-detail job-detail-company\"><i className=\"fas fa-building icon\"></i><span>{description}</span></div>;\n        case JobDetailsEnum.LOCATION:\n            return <div className=\"job-detail job-detail-location\"><i className=\"fas fa-map-marker-alt icon\"></i><span>{description}</span></div>;\n        case JobDetailsEnum.CONTRACT:\n            return <div className=\"job-detail job-detail-contract\"><i className=\"fas fa-file-signature icon\"></i><span>{description}</span></div>;\n        case JobDetailsEnum.NONE:\n            return <div className=\"job-detail job-detail-none\"><span>{description}</span></div>;\n    }\n}\n\nexport default JobDetail;","import JobDetail from \"../../atoms/job-detail/job-detail\";\nimport { JobDetailsEnum } from \"../../atoms/job-detail/job-type\";\nimport \"./job-details.css\"\n\ninterface Props {\n    company: string,\n    location: string,\n    contract: string\n}\n\nconst JobDetails = (props: Props) => {\n    const { company, location, contract } = props;\n    return (\n        <div className=\"job-details\">\n            <JobDetail type={JobDetailsEnum.COMPANY} description={company} />\n            <JobDetail type={JobDetailsEnum.LOCATION} description={location} />\n            <JobDetail type={JobDetailsEnum.CONTRACT} description={contract} />\n        </div>\n    );\n}\n\nexport default JobDetails;","import JobTitle from \"../../atoms/job-title/job-title\";\nimport JobDetails from \"../job-details/job-details\";\nimport \"./card-header.css\"\n\ninterface Props {\n    position: string,\n    company: string,\n    location: string,\n    contract: string\n}\n\nconst CardHeader = (props: Props) => {\n    const { position, company, location, contract } = props;\n    return (\n        <div className=\"card-header\">\n            <JobTitle position={position} />\n            <JobDetails company={company} location={location} contract={contract} />\n        </div>\n    );\n}\n\nexport default CardHeader;","import \"./job-description.css\"\n\ninterface Props {\n  description: string\n}\n\nconst JobDescription = (props: Props) => {\n  const { description } = props;\n  return <div className=\"description\">{description}</div>\n}\n\nexport default JobDescription;","import \"./job-skill.css\"\n\ninterface Props {\n  skill: string\n}\n\nconst JobSkill = (props: Props) => {\n  const { skill } = props;\n  return <span className=\"skill\">{skill}</span>;\n}\n\nexport default JobSkill;","import JobSkill from \"../../atoms/job-skill/job-skill\";\nimport \"./job-skill-list.css\"\n\ninterface Props {\n  skills: string[]\n}\n\nconst SkillList = ({skills}: Props) => {\n  return  <div className=\"skill-list\">\n            {skills.map((skill, index) => <JobSkill key={index} skill={skill}/>)}\n        </div>\n}\n\nexport default SkillList;","import \"./job-action.css\";\n\nconst JobAction = () => {\n  return (\n    <a href=\"\" className=\"job-apply\">\n      Apply\n    </a>\n  );\n}\n\nexport default JobAction;","import JobDescription from \"../../atoms/job-description/job-description\";\nimport SkillList from \"../job-skill-list/job-skill-list\";\nimport JobButton from \"../../atoms/job-action/job-action\";\nimport \"./card-body.css\"\n\ninterface Props {\n    skills: string[], \n    description: string\n}\n\nconst CardBody = (props: Props) => {\n    const { skills, description } = props;\n    return (\n        <div className=\"card-body\">\n            <JobDescription description={description} />\n            <SkillList skills={skills}/>\n            <JobButton />\n        </div>\n    );\n}\n\nexport default CardBody;","import CardHeader from \"../../molecules/job-card-header/card-header\";\nimport CardBody from \"../../molecules/job-card-body/card-body\";\nimport { Card } from \"./card-type\";\nimport \"./job-card.css\";\n\nconst JobCard = (props: Card) => {\n  const { position, company, location, contract, skills, description } = props;\n  return (\n    <div className=\"card-wrapper\">\n      <CardHeader position={position} company={company} location={location} contract={contract} />\n      <CardBody skills={skills} description={description} />\n    </div>\n  );\n}\n\nexport default JobCard;","import JobCard from \"../../organisms/job-card/job-card\";\nimport { Card } from \"../../organisms/job-card/card-type\";\nimport \"./job-list.css\";\n\ninterface Props {\n    jobs: Card[]\n}\n\nconst JobList = (props: Props) => {\n    const { jobs } = props;\n\n    const hasResults = jobs.length > 0;\n    return (\n        <div className=\"jobs-list\">\n            {jobs.map((job) => {\n                return <JobCard key={job.id} position={job.position} company={job.company} location={job.location} contract={job.contract} skills={job.skills} description={job.description} />\n            })}\n            {!hasResults &&\n                <div className=\"empty-list\">\n                    <h3>No results.</h3>\n                    <span>Search again or try removing filters.</span>\n                </div>\n            }\n        </div>\n    )\n}\n\nexport default JobList;","import Header from \"../atomic-ui/organisms/header/header\";\nimport SideNav from \"../atomic-ui/organisms/side-nav/side-nav\";\nimport JobList from \"../atomic-ui/organisms/job-list/job-list\";\nimport { Card } from \"../atomic-ui/organisms/job-card/card-type\";\nimport { AccordionCheckboxType } from \"../atomic-ui/molecules/accordion-checkbox/accordion-checkbox-type\";\n\ninterface Props {\n  jobs: Card[],\n  clearFilters: () => void,\n  accordionOptions: AccordionCheckboxType[],\n  searchInput: string,\n  handleSearch: (e: { target: HTMLInputElement }) => void\n}\n\nconst JobBoard = (props: Props) => {\n  const { jobs, clearFilters, accordionOptions, searchInput, handleSearch } = props;\n  return (\n    <div className=\"board\">\n      <header>\n        <div className=\"banner\"></div>\n        <Header searchInput={searchInput} handleSearch={handleSearch} />\n      </header>\n      <div className=\"board-body\">\n        <SideNav clearFilters={clearFilters} accordionOptions={accordionOptions} searchInput={searchInput} handleSearch={handleSearch} />\n        <JobList jobs={jobs} />\n      </div>\n    </div>\n  );\n}\n\nexport default JobBoard;","import { Card } from \"../atomic-ui/organisms/job-card/card-type\";\nimport { AccordionCheckboxType } from \"../atomic-ui/molecules/accordion-checkbox/accordion-checkbox-type\";\nimport JobBoard from \"../templates/job-board\";\nimport \"./board.css\";\n\ninterface Props {\n    jobs: Card[],\n    clearFilters: () => void,\n    accordionOptions: AccordionCheckboxType[],\n    searchInput: string,\n    handleSearch: (e: { target: HTMLInputElement }) => void\n}\n\nconst Board = (props: Props) => {\n    const { jobs, clearFilters, accordionOptions, searchInput, handleSearch } = props;\n    return <JobBoard jobs={jobs} clearFilters={clearFilters} accordionOptions={accordionOptions} searchInput={searchInput} handleSearch={handleSearch} />\n}\n\nBoard.defaultProps = {\n    jobs: [],\n    accordionOptions: []\n}\n\nexport default Board;","import data from \"../services/data.json\";\n\nconst getLabelOptions = (label, onSelectFilterOption) => {\n    return data.reduce((acc, option) => {\n        if (!acc.some(e => e.label === option[label]))\n            if(Array.isArray(option[label])) {\n                //going through array of skills\n                option[label].forEach(o => {\n                    if (!acc.some(e => e.label.includes(o)))\n                        acc.push({ label: o, onChange: onSelectFilterOption });\n                })\n            }\n            else \n                acc.push({ label: option[label], onChange: onSelectFilterOption });\n        return acc;\n    }, []);\n}\n\nexport const getAccordionFilters = () => {\n    const accordionFilters = new Map();\n\n    accordionFilters.set(\"location\", []);\n    accordionFilters.set(\"contract\", []);\n    accordionFilters.set(\"level\", []);\n    accordionFilters.set(\"skills\", []);\n\n    return accordionFilters;\n}\n\nexport const getAccordionOptions = (onSelectFilterOption, clearFilterActive) => {\n    const accordionFiltersMap = getAccordionFilters();\n    const accordionOptions = [...accordionFiltersMap.keys()];\n\n    return accordionOptions.map((option, index) => {\n        return { id: `${index}`, label: option, clearFilter: clearFilterActive, options: getLabelOptions(option, onSelectFilterOption) };\n    });\n}\n\nconst checkPositionAndCompany = (keyword, job) => {\n    return job.position.toLowerCase().indexOf(keyword.toLowerCase()) > -1 || job.company.toLowerCase().indexOf(keyword.toLowerCase()) > -1\n}\n\nexport const getSearchOptions = (keyword) => {\n    return data.filter((job) => checkPositionAndCompany(keyword, job));\n}\n\nconst checkJobsFilter = (filter, keyword) => {\n    return data.filter((job) => {\n        //going through array of skills\n        if(Array.isArray(job[filter])) {\n            return job[filter].some(e => e.includes(keyword))\n        }\n        return job[filter].toLowerCase().indexOf(keyword.toLowerCase()) > -1\n    });\n}\n\nconst getJobsByFilters = (value, key) => {\n    return value.reduce((acc, filter) => {\n        let filteredOption = checkJobsFilter(key, filter);\n        acc.push(filteredOption);\n        return acc;\n    }, []);\n}\n\nconst isUniqueValue = (value, arr) => {\n    let isUnique = true;\n    arr.forEach(arr1 => {\n        if (arr1.length > 0) {\n            isUnique = isUnique && arr1.some(o => value.id === o.id);\n        }\n    });\n    return isUnique;\n};\n\nconst uniqueJobs = (filteresJobs) => {\n    const acc = [];\n    filteresJobs.forEach(arr => {\n        arr.forEach(value => {\n            if (isUniqueValue(value, filteresJobs))\n                !acc.some(obj => obj.id === value.id) && acc.push(value);\n        })\n    })\n\n    return acc;\n}\n\nexport const getFilteredJobsByOption = (filterKeywords) => {\n    const filtered = [];\n    filterKeywords.forEach((value, key) => {\n        filtered.push(getJobsByFilters(value, key).flat());\n    });\n    return uniqueJobs(filtered);\n}","import { useState, useEffect } from \"react\";\nimport BoardPage from \"../components/pages/board\";\nimport data from \"../services/data.json\";\nimport { getAccordionOptions, getSearchOptions, getFilteredJobsByOption, getAccordionFilters } from \"../utilities/utilities\";\nimport \"normalize.css\";\nimport \"./board.css\";\n\nconst BoardView = () => {\n    const [input, setInput] = useState(\"\");\n    const [jobs, setJobs] = useState(data);\n    const [filterKeywords, setfilterKeywords] = useState(getAccordionFilters);\n    const [clearFilterActive, setClearFilter] = useState(false);\n\n    const onSelectFilterOption = (e) => {\n        const optionSelected = e.target.getAttribute(\"data-parent\");\n        const keyword = e.target.name;\n\n        if (!filterKeywords.get(optionSelected).some(key => key === keyword)) {\n            const prevKeys = filterKeywords.get(optionSelected);\n            setfilterKeywords(new Map(filterKeywords.set(optionSelected, [...prevKeys, keyword])));\n        }\n        else {\n            const newKeys = filterKeywords.get(optionSelected).filter((key) => key !== keyword);\n            setfilterKeywords(new Map(filterKeywords.set(optionSelected, [...newKeys])));\n        }\n\n    }\n\n    const handleSearch = (e) => {\n        const userInput = e.target.value;\n        setInput(userInput);\n        setJobs(getSearchOptions(userInput));\n    }\n\n    const clearFilters = () => {\n        setfilterKeywords(new Map(getAccordionFilters()));\n\n        if ([...filterKeywords.values()].flat().length > 0) \n            setClearFilter(true);\n    };\n\n    useEffect(() => {\n        setClearFilter(false);\n    }, []);\n\n\n    useEffect(() => {\n        const filteredOptions = getFilteredJobsByOption(filterKeywords);\n        setJobs(filteredOptions);\n\n        if ([...filterKeywords.values()].flat().length === 0){\n            setJobs(data);\n            setClearFilter(false);\n        }\n\n    }, [filterKeywords]);\n\n    return <BoardPage jobs={jobs} clearFilters={clearFilters} accordionOptions={getAccordionOptions(onSelectFilterOption, clearFilterActive)} handleSearch={handleSearch} searchInput={input} />\n}\n\nexport default BoardView;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Board from './views/board.tsx';\nimport reportWebVitals from './reportWebVitals';\n// import '@fortawesome/fontawesome-svg-core/styles.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Board />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}