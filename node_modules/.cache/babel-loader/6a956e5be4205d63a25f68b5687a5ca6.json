{"ast":null,"code":"var _jsxFileName = \"/Users/inescarneiro/Documents/Playground/interplanetary-job-board/src/views/board.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport BoardPage from \"../components/pages/board\";\nimport data from \"../services/data.json\";\nimport { getAccordionOptions, getSearchOptions, getAccordionFilters } from \"../utilities/utilities\";\nimport \"normalize.css\";\nimport \"./board.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BoardView = () => {\n  _s();\n\n  const [input, setInput] = useState(\"\");\n  const [jobs, setJobs] = useState(data);\n  const [filterKeywords, setfilterKeywords] = useState(getAccordionFilters);\n  const [filterKeywordsObj, setfilterKeywordsObj] = useState([]);\n\n  const onSelectFilterOption = e => {\n    const optionSelected = e.target.getAttribute(\"data-parent\");\n    const keyword = e.target.name; //    const test = newIdea2(keyword, optionSelected, jobs);\n    //    console.log(\"newIdea\", newIdea2(keyword, optionSelected, jobs));\n    //    setJobs(test);\n\n    if (!filterKeywordsObj.includes(keyword)) {\n      setfilterKeywordsObj([...filterKeywordsObj, keyword]);\n    } else {\n      const hello = filterKeywordsObj.filter(e => e !== keyword);\n      setfilterKeywordsObj(hello);\n    }\n\n    if (!filterKeywords.get(optionSelected).some(key => key === keyword)) {\n      const prevKeys = filterKeywords.get(optionSelected);\n      setfilterKeywords(new Map(filterKeywords.set(optionSelected, [...prevKeys, keyword])));\n    } else {\n      const newKeys = filterKeywords.get(optionSelected).filter(key => key !== keyword);\n      setfilterKeywords(new Map(filterKeywords.set(optionSelected, [...newKeys])));\n    }\n  };\n\n  const handleSearch = e => {\n    const userInput = e.target.value;\n    setInput(userInput);\n    setJobs(getSearchOptions(userInput));\n  };\n\n  const clearAll = () => {\n    setfilterKeywords(getAccordionFilters);\n  };\n\n  useEffect(() => {\n    // const filteredOptions = getFilteredJobsByOption(filterKeywords);\n    console.log(filterKeywords); // if(filteredOptions.length) \n    //     setJobs(filteredOptions);\n    // else // error case\n    //     setJobs(data);\n  }, [filterKeywords]);\n  return /*#__PURE__*/_jsxDEV(BoardPage, {\n    jobs: jobs,\n    accordionOptions: getAccordionOptions(onSelectFilterOption),\n    handleSearch: handleSearch,\n    searchInput: input\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 12\n  }, this);\n};\n\n_s(BoardView, \"AWnZH3Ur3M8rypr+CkQbpLJUhE8=\");\n\n_c = BoardView;\nexport default BoardView;\n\nvar _c;\n\n$RefreshReg$(_c, \"BoardView\");","map":{"version":3,"sources":["/Users/inescarneiro/Documents/Playground/interplanetary-job-board/src/views/board.tsx"],"names":["useState","useEffect","BoardPage","data","getAccordionOptions","getSearchOptions","getAccordionFilters","BoardView","input","setInput","jobs","setJobs","filterKeywords","setfilterKeywords","filterKeywordsObj","setfilterKeywordsObj","onSelectFilterOption","e","optionSelected","target","getAttribute","keyword","name","includes","hello","filter","get","some","key","prevKeys","Map","set","newKeys","handleSearch","userInput","value","clearAll","console","log"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport BoardPage from \"../components/pages/board\";\nimport data from \"../services/data.json\";\nimport { getAccordionOptions, getSearchOptions, getFilteredJobsByOption, getAccordionFilters, newIdea, newIdea2 } from \"../utilities/utilities\";\nimport \"normalize.css\";\nimport \"./board.css\";\n\nconst BoardView = () => {\n    const [input, setInput] = useState(\"\");\n    const [jobs, setJobs] = useState(data);\n    const [filterKeywords, setfilterKeywords] = useState(getAccordionFilters);\n    const [filterKeywordsObj, setfilterKeywordsObj] = useState([]);\n \n    const onSelectFilterOption = (e) => {\n       const optionSelected = e.target.getAttribute(\"data-parent\");\n       const keyword = e.target.name;\n\n    //    const test = newIdea2(keyword, optionSelected, jobs);\n    //    console.log(\"newIdea\", newIdea2(keyword, optionSelected, jobs));\n    //    setJobs(test);\n\n        if(!filterKeywordsObj.includes(keyword)) {\n            setfilterKeywordsObj([...filterKeywordsObj, keyword]);\n        }\n        else {\n            const hello = filterKeywordsObj.filter((e) => e !== keyword);\n            setfilterKeywordsObj(hello);\n        }\n       \n       if (!filterKeywords.get(optionSelected).some(key => key === keyword)) { \n            const prevKeys = filterKeywords.get(optionSelected);\n            setfilterKeywords(new Map(filterKeywords.set(optionSelected, [...prevKeys, keyword])));\n       }\n       else {\n            const newKeys = filterKeywords.get(optionSelected).filter((key) => key !== keyword);\n            setfilterKeywords(new Map(filterKeywords.set(optionSelected, [...newKeys])));\n       }\n    }\n\n    const handleSearch = (e) => {\n        const userInput = e.target.value;\n        setInput(userInput);\n        setJobs(getSearchOptions(userInput));\n    }\n\n    const clearAll = () => {\n        setfilterKeywords(getAccordionFilters);\n    };\n\n\n    useEffect(() => {\n        // const filteredOptions = getFilteredJobsByOption(filterKeywords);\n        console.log(filterKeywords);\n        // if(filteredOptions.length) \n        //     setJobs(filteredOptions);\n        // else // error case\n        //     setJobs(data);\n    }, [filterKeywords]);\n\n    return <BoardPage jobs={jobs} accordionOptions={getAccordionOptions(onSelectFilterOption)} handleSearch={handleSearch} searchInput={input}/>\n}\n\nexport default BoardView;"]},"metadata":{},"sourceType":"module"}