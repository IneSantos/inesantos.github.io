{"ast":null,"code":"var _jsxFileName = \"/Users/inescarneiro/Documents/Playground/interplanetary-job-board/src/views/board.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport BoardPage from \"../components/pages/board\";\nimport data from \"../services/data.json\";\nimport { getAccordionOptions, getSearchOptions, getAccordionFilters } from \"../utilities/utilities\";\nimport \"normalize.css\";\nimport \"./board.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BoardView = () => {\n  _s();\n\n  const [input, setInput] = useState(\"\");\n  const [jobs, setJobs] = useState(data);\n  const [filterKeywords, setfilterKeywords] = useState(getAccordionFilters);\n  const [updateFilter, setUpdateFilter] = useState(false);\n\n  const onSelectFilterOption = e => {\n    const optionSelected = e.target.getAttribute(\"data-parent\");\n    const keyword = e.target.name;\n    console.log(filterKeywords.get(optionSelected));\n\n    if (!filterKeywords.get(optionSelected).some(key => key === keyword)) {\n      const prevKeys = filterKeywords.get(optionSelected);\n      setfilterKeywords(filterKeywords.set(optionSelected, [...prevKeys, keyword]));\n      setUpdateFilter(!updateFilter);\n    } else {\n      const newKeys = filterKeywords.get(optionSelected).filter(key => key.keyword === keyword);\n      setfilterKeywords(filterKeywords.set(optionSelected, [...newKeys]));\n      setUpdateFilter(!updateFilter);\n    }\n  };\n\n  const handleSearch = e => {\n    const userInput = e.target.value;\n    setInput(userInput);\n    setJobs(getSearchOptions(userInput));\n  };\n\n  const clearAll = () => {//setfilterKeywords([]);\n  };\n\n  useEffect(() => {\n    // const filteredOptions = getFilteredOptions(filterKeywords);\n    // if(filteredOptions.length) \n    //     setJobs(filteredOptions);\n    // else // error case\n    //     setJobs(data);\n    console.log(updateFilter);\n    filterKeywords.forEach((value, key, map) => {\n      console.log(`map.get('${key}') = ${value}`);\n    });\n  }, [updateFilter]);\n  return /*#__PURE__*/_jsxDEV(BoardPage, {\n    jobs: jobs,\n    accordionOptions: getAccordionOptions(onSelectFilterOption),\n    handleSearch: handleSearch,\n    searchInput: input\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 12\n  }, this);\n};\n\n_s(BoardView, \"uuxx2+AXM/RZzWSeKmqBQKWfnhM=\");\n\n_c = BoardView;\nexport default BoardView;\n\nvar _c;\n\n$RefreshReg$(_c, \"BoardView\");","map":{"version":3,"sources":["/Users/inescarneiro/Documents/Playground/interplanetary-job-board/src/views/board.tsx"],"names":["useState","useEffect","BoardPage","data","getAccordionOptions","getSearchOptions","getAccordionFilters","BoardView","input","setInput","jobs","setJobs","filterKeywords","setfilterKeywords","updateFilter","setUpdateFilter","onSelectFilterOption","e","optionSelected","target","getAttribute","keyword","name","console","log","get","some","key","prevKeys","set","newKeys","filter","handleSearch","userInput","value","clearAll","forEach","map"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport BoardPage from \"../components/pages/board\";\nimport data from \"../services/data.json\";\nimport { getAccordionOptions, getSearchOptions, getFilteredOptions, getAccordionFilters } from \"../utilities/utilities\";\nimport \"normalize.css\";\nimport \"./board.css\";\n\nconst BoardView = () => {\n    const [input, setInput] = useState(\"\");\n    const [jobs, setJobs] = useState(data);\n    const [filterKeywords, setfilterKeywords] = useState(getAccordionFilters);\n    const [updateFilter, setUpdateFilter] = useState(false);\n\n    const onSelectFilterOption = (e) => {\n       const optionSelected = e.target.getAttribute(\"data-parent\");\n       const keyword = e.target.name;\n\n       console.log(filterKeywords.get(optionSelected))\n       \n       if (!filterKeywords.get(optionSelected).some(key => key === keyword)) {\n            const prevKeys = filterKeywords.get(optionSelected);\n            setfilterKeywords(filterKeywords.set(optionSelected, [...prevKeys, keyword]));\n            setUpdateFilter(!updateFilter);\n       }\n       else {\n            const newKeys = filterKeywords.get(optionSelected).filter((key) => key.keyword === keyword)\n            setfilterKeywords(filterKeywords.set(optionSelected, [...newKeys]));\n            setUpdateFilter(!updateFilter);\n       }\n    }\n\n    const handleSearch = (e) => {\n        const userInput = e.target.value;\n        setInput(userInput);\n        setJobs(getSearchOptions(userInput));\n    }\n\n    const clearAll = () => {\n        //setfilterKeywords([]);\n    };\n\n\n    useEffect(() => {\n        // const filteredOptions = getFilteredOptions(filterKeywords);\n\n        // if(filteredOptions.length) \n        //     setJobs(filteredOptions);\n        // else // error case\n        //     setJobs(data);\n        console.log(updateFilter);\n        filterKeywords.forEach((value, key, map) => {\n            console.log(`map.get('${key}') = ${value}`)\n        });\n\n    }, [updateFilter]);\n\n    return <BoardPage jobs={jobs} accordionOptions={getAccordionOptions(onSelectFilterOption)} handleSearch={handleSearch} searchInput={input}/>\n}\n\nexport default BoardView;"]},"metadata":{},"sourceType":"module"}