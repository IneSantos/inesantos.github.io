{"ast":null,"code":"import data from \"../services/data.json\";\n\nconst getLabelOptions = (label, onSelectFilterOption) => {\n  return data.reduce((acc, option) => {\n    if (!acc.some(e => e.label === option[label])) if (Array.isArray(option[label])) {\n      //going through array of skills\n      option[label].forEach(o => {\n        if (!acc.some(e => e.label.includes(o))) acc.push({\n          label: o,\n          onChange: onSelectFilterOption\n        });\n      });\n    } else acc.push({\n      label: option[label],\n      onChange: onSelectFilterOption\n    });\n    return acc;\n  }, []);\n};\n\nexport const getAccordionFilters = () => {\n  const accordionFilters = new Map();\n  accordionFilters.set(\"location\", []);\n  accordionFilters.set(\"contract\", []);\n  accordionFilters.set(\"level\", []);\n  accordionFilters.set(\"skills\", []);\n  console.log(accordionFilters);\n  return accordionFilters;\n};\nexport const getAccordionOptions = (onSelectFilterOption, clearFilterActive) => {\n  const accordionFiltersMap = getAccordionFilters();\n  const accordionOptions = [...accordionFiltersMap.keys()];\n  console.log(\"filterKeywords\", filterKeywords);\n  return accordionOptions.map((option, index) => {\n    return {\n      id: `${index}`,\n      label: option,\n      clearFilter: clearFilterActive,\n      options: getLabelOptions(option, onSelectFilterOption)\n    };\n  });\n};\n\nconst checkPositionAndCompany = (keyword, job) => {\n  return job.position.toLowerCase().indexOf(keyword.toLowerCase()) > -1 || job.company.toLowerCase().indexOf(keyword.toLowerCase()) > -1;\n};\n\nexport const getSearchOptions = keyword => {\n  return data.filter(job => checkPositionAndCompany(keyword, job));\n};\n\nconst checkJobsFilter = (filter, keyword) => {\n  return data.filter(job => {\n    //going through array of skills\n    if (Array.isArray(job[filter])) {\n      return job[filter].some(e => e.includes(keyword));\n    }\n\n    return job[filter].toLowerCase().indexOf(keyword.toLowerCase()) > -1;\n  });\n};\n\nconst getJobsByFilters = (value, key) => {\n  return value.reduce((acc, filter) => {\n    let filteredOption = checkJobsFilter(key, filter);\n    acc.push(filteredOption);\n    return acc;\n  }, []);\n};\n\nconst isUniqueValue = (value, arr) => {\n  let isUnique = true;\n  arr.forEach(arr1 => {\n    if (arr1.length > 0) {\n      isUnique = isUnique && arr1.some(o => value.id === o.id);\n    }\n  });\n  return isUnique;\n};\n\nconst uniqueJobs = filteresJobs => {\n  const acc = [];\n  filteresJobs.forEach(arr => {\n    arr.forEach(value => {\n      if (isUniqueValue(value, filteresJobs)) !acc.some(obj => obj.id === value.id) && acc.push(value);\n    });\n  });\n  return acc;\n};\n\nexport const getFilteredJobsByOption = filterKeywords => {\n  const filtered = [];\n  filterKeywords.forEach((value, key) => {\n    filtered.push(getJobsByFilters(value, key).flat());\n  });\n  return uniqueJobs(filtered);\n};","map":{"version":3,"sources":["/Users/inescarneiro/Documents/Playground/interplanetary-job-board/src/utilities/utilities.tsx"],"names":["data","getLabelOptions","label","onSelectFilterOption","reduce","acc","option","some","e","Array","isArray","forEach","o","includes","push","onChange","getAccordionFilters","accordionFilters","Map","set","console","log","getAccordionOptions","clearFilterActive","accordionFiltersMap","accordionOptions","keys","filterKeywords","map","index","id","clearFilter","options","checkPositionAndCompany","keyword","job","position","toLowerCase","indexOf","company","getSearchOptions","filter","checkJobsFilter","getJobsByFilters","value","key","filteredOption","isUniqueValue","arr","isUnique","arr1","length","uniqueJobs","filteresJobs","obj","getFilteredJobsByOption","filtered","flat"],"mappings":"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","sourcesContent":["import data from \"../services/data.json\";\n\nconst getLabelOptions = (label, onSelectFilterOption) => {\n    return data.reduce((acc, option) => {\n        if (!acc.some(e => e.label === option[label]))\n            if(Array.isArray(option[label])) {\n                //going through array of skills\n                option[label].forEach(o => {\n                    if (!acc.some(e => e.label.includes(o)))\n                        acc.push({ label: o, onChange: onSelectFilterOption });\n                })\n            }\n            else \n                acc.push({ label: option[label], onChange: onSelectFilterOption });\n        return acc;\n    }, []);\n}\n\nexport const getAccordionFilters = () => {\n    const accordionFilters = new Map();\n\n    accordionFilters.set(\"location\", []);\n    accordionFilters.set(\"contract\", []);\n    accordionFilters.set(\"level\", []);\n    accordionFilters.set(\"skills\", []);\n\n\n    console.log(accordionFilters);\n    return accordionFilters;\n}\n\nexport const getAccordionOptions = (onSelectFilterOption, clearFilterActive) => {\n    const accordionFiltersMap = getAccordionFilters();\n    const accordionOptions = [...accordionFiltersMap.keys()];\n    console.log(\"filterKeywords\", filterKeywords);\n\n    return accordionOptions.map((option, index) => {\n        return { id: `${index}`, label: option, clearFilter: clearFilterActive, options: getLabelOptions(option, onSelectFilterOption) };\n    });\n}\n\nconst checkPositionAndCompany = (keyword, job) => {\n    return job.position.toLowerCase().indexOf(keyword.toLowerCase()) > -1 || job.company.toLowerCase().indexOf(keyword.toLowerCase()) > -1\n}\n\nexport const getSearchOptions = (keyword) => {\n    return data.filter((job) => checkPositionAndCompany(keyword, job));\n}\n\nconst checkJobsFilter = (filter, keyword) => {\n    return data.filter((job) => {\n        //going through array of skills\n        if(Array.isArray(job[filter])) {\n            return job[filter].some(e => e.includes(keyword))\n        }\n        return job[filter].toLowerCase().indexOf(keyword.toLowerCase()) > -1\n    });\n}\n\nconst getJobsByFilters = (value, key) => {\n    return value.reduce((acc, filter) => {\n        let filteredOption = checkJobsFilter(key, filter);\n        acc.push(filteredOption);\n        return acc;\n    }, []);\n}\n\nconst isUniqueValue = (value, arr) => {\n    let isUnique = true;\n    arr.forEach(arr1 => {\n        if (arr1.length > 0) {\n            isUnique = isUnique && arr1.some(o => value.id === o.id);\n        }\n    });\n    return isUnique;\n};\n\nconst uniqueJobs = (filteresJobs) => {\n    const acc = [];\n    filteresJobs.forEach(arr => {\n        arr.forEach(value => {\n            if (isUniqueValue(value, filteresJobs))\n                !acc.some(obj => obj.id === value.id) && acc.push(value);\n        })\n    })\n\n    return acc;\n}\n\nexport const getFilteredJobsByOption = (filterKeywords) => {\n    const filtered = [];\n    filterKeywords.forEach((value, key) => {\n        filtered.push(getJobsByFilters(value, key).flat());\n    });\n    return uniqueJobs(filtered);\n}"]},"metadata":{},"sourceType":"module"}