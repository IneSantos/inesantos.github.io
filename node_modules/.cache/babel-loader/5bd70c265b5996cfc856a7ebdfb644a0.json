{"ast":null,"code":"import _toConsumableArray from\"/Users/inescarneiro/Documents/Playground/interplanetary-job-board/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import data from\"../services/data.json\";var getLabelOptions=function getLabelOptions(label,onSelectFilterOption){return data.reduce(function(acc,option){if(!acc.some(function(e){return e.label===option[label];}))if(Array.isArray(option[label])){//going through array of skills\noption[label].forEach(function(o){if(!acc.some(function(e){return e.label.includes(o);}))acc.push({label:o,onChange:onSelectFilterOption});});}else acc.push({label:option[label],onChange:onSelectFilterOption});return acc;},[]);};export var getAccordionFilters=function getAccordionFilters(){var accordionFilters=new Map();accordionFilters.set(\"location\",[]);accordionFilters.set(\"contract\",[]);accordionFilters.set(\"level\",[]);accordionFilters.set(\"skills\",[]);return accordionFilters;};export var getAccordionOptions=function getAccordionOptions(onSelectFilterOption,clearFilterActive){var accordionFiltersMap=getAccordionFilters();var accordionOptions=_toConsumableArray(accordionFiltersMap.keys());return accordionOptions.map(function(option,index){return{id:\"\".concat(index),label:option,clearFilter:clearFilterActive,options:getLabelOptions(option,onSelectFilterOption)};});};var checkPositionAndCompany=function checkPositionAndCompany(keyword,job){return job.position.toLowerCase().indexOf(keyword.toLowerCase())>-1||job.company.toLowerCase().indexOf(keyword.toLowerCase())>-1;};export var getSearchOptions=function getSearchOptions(keyword){return data.filter(function(job){return checkPositionAndCompany(keyword,job);});};var checkJobsFilter=function checkJobsFilter(filter,keyword){return data.filter(function(job){//going through array of skills\nif(Array.isArray(job[filter])){return job[filter].some(function(e){return e.includes(keyword);});}return job[filter].toLowerCase().indexOf(keyword.toLowerCase())>-1;});};var getJobsByFilters=function getJobsByFilters(value,key){return value.reduce(function(acc,filter){var filteredOption=checkJobsFilter(key,filter);acc.push(filteredOption);return acc;},[]);};var isUniqueValue=function isUniqueValue(value,arr){var isUnique=true;arr.forEach(function(arr1){if(arr1.length>0){isUnique=isUnique&&arr1.some(function(o){return value.id===o.id;});}});return isUnique;};var uniqueJobs=function uniqueJobs(filteresJobs){var acc=[];filteresJobs.forEach(function(arr){arr.forEach(function(value){if(isUniqueValue(value,filteresJobs))!acc.some(function(obj){return obj.id===value.id;})&&acc.push(value);});});return acc;};export var getFilteredJobsByOption=function getFilteredJobsByOption(filterKeywords){var filtered=[];filterKeywords.forEach(function(value,key){filtered.push(getJobsByFilters(value,key).flat());});return uniqueJobs(filtered);};","map":{"version":3,"sources":["/Users/inescarneiro/Documents/Playground/interplanetary-job-board/src/utilities/utilities.tsx"],"names":["data","getLabelOptions","label","onSelectFilterOption","reduce","acc","option","some","e","Array","isArray","forEach","o","includes","push","onChange","getAccordionFilters","accordionFilters","Map","set","getAccordionOptions","clearFilterActive","accordionFiltersMap","accordionOptions","keys","map","index","id","clearFilter","options","checkPositionAndCompany","keyword","job","position","toLowerCase","indexOf","company","getSearchOptions","filter","checkJobsFilter","getJobsByFilters","value","key","filteredOption","isUniqueValue","arr","isUnique","arr1","length","uniqueJobs","filteresJobs","obj","getFilteredJobsByOption","filterKeywords","filtered","flat"],"mappings":"gMAAA,MAAOA,CAAAA,IAAP,KAAiB,uBAAjB,CAEA,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACC,KAAD,CAAQC,oBAAR,CAAiC,CACrD,MAAOH,CAAAA,IAAI,CAACI,MAAL,CAAY,SAACC,GAAD,CAAMC,MAAN,CAAiB,CAChC,GAAI,CAACD,GAAG,CAACE,IAAJ,CAAS,SAAAC,CAAC,QAAIA,CAAAA,CAAC,CAACN,KAAF,GAAYI,MAAM,CAACJ,KAAD,CAAtB,EAAV,CAAL,CACI,GAAGO,KAAK,CAACC,OAAN,CAAcJ,MAAM,CAACJ,KAAD,CAApB,CAAH,CAAiC,CAC7B;AACAI,MAAM,CAACJ,KAAD,CAAN,CAAcS,OAAd,CAAsB,SAAAC,CAAC,CAAI,CACvB,GAAI,CAACP,GAAG,CAACE,IAAJ,CAAS,SAAAC,CAAC,QAAIA,CAAAA,CAAC,CAACN,KAAF,CAAQW,QAAR,CAAiBD,CAAjB,CAAJ,EAAV,CAAL,CACIP,GAAG,CAACS,IAAJ,CAAS,CAAEZ,KAAK,CAAEU,CAAT,CAAYG,QAAQ,CAAEZ,oBAAtB,CAAT,EACP,CAHD,EAIH,CAND,IAQIE,CAAAA,GAAG,CAACS,IAAJ,CAAS,CAAEZ,KAAK,CAAEI,MAAM,CAACJ,KAAD,CAAf,CAAwBa,QAAQ,CAAEZ,oBAAlC,CAAT,EACR,MAAOE,CAAAA,GAAP,CACH,CAZM,CAYJ,EAZI,CAAP,CAaH,CAdD,CAgBA,MAAO,IAAMW,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,EAAM,CACrC,GAAMC,CAAAA,gBAAgB,CAAG,GAAIC,CAAAA,GAAJ,EAAzB,CAEAD,gBAAgB,CAACE,GAAjB,CAAqB,UAArB,CAAiC,EAAjC,EACAF,gBAAgB,CAACE,GAAjB,CAAqB,UAArB,CAAiC,EAAjC,EACAF,gBAAgB,CAACE,GAAjB,CAAqB,OAArB,CAA8B,EAA9B,EACAF,gBAAgB,CAACE,GAAjB,CAAqB,QAArB,CAA+B,EAA/B,EAEA,MAAOF,CAAAA,gBAAP,CACH,CATM,CAWP,MAAO,IAAMG,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,CAACjB,oBAAD,CAAuBkB,iBAAvB,CAA6C,CAC5E,GAAMC,CAAAA,mBAAmB,CAAGN,mBAAmB,EAA/C,CACA,GAAMO,CAAAA,gBAAgB,oBAAOD,mBAAmB,CAACE,IAApB,EAAP,CAAtB,CAEA,MAAOD,CAAAA,gBAAgB,CAACE,GAAjB,CAAqB,SAACnB,MAAD,CAASoB,KAAT,CAAmB,CAC3C,MAAO,CAAEC,EAAE,WAAKD,KAAL,CAAJ,CAAkBxB,KAAK,CAAEI,MAAzB,CAAiCsB,WAAW,CAAEP,iBAA9C,CAAiEQ,OAAO,CAAE5B,eAAe,CAACK,MAAD,CAASH,oBAAT,CAAzF,CAAP,CACH,CAFM,CAAP,CAGH,CAPM,CASP,GAAM2B,CAAAA,uBAAuB,CAAG,QAA1BA,CAAAA,uBAA0B,CAACC,OAAD,CAAUC,GAAV,CAAkB,CAC9C,MAAOA,CAAAA,GAAG,CAACC,QAAJ,CAAaC,WAAb,GAA2BC,OAA3B,CAAmCJ,OAAO,CAACG,WAAR,EAAnC,EAA4D,CAAC,CAA7D,EAAkEF,GAAG,CAACI,OAAJ,CAAYF,WAAZ,GAA0BC,OAA1B,CAAkCJ,OAAO,CAACG,WAAR,EAAlC,EAA2D,CAAC,CAArI,CACH,CAFD,CAIA,MAAO,IAAMG,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACN,OAAD,CAAa,CACzC,MAAO/B,CAAAA,IAAI,CAACsC,MAAL,CAAY,SAACN,GAAD,QAASF,CAAAA,uBAAuB,CAACC,OAAD,CAAUC,GAAV,CAAhC,EAAZ,CAAP,CACH,CAFM,CAIP,GAAMO,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACD,MAAD,CAASP,OAAT,CAAqB,CACzC,MAAO/B,CAAAA,IAAI,CAACsC,MAAL,CAAY,SAACN,GAAD,CAAS,CACxB;AACA,GAAGvB,KAAK,CAACC,OAAN,CAAcsB,GAAG,CAACM,MAAD,CAAjB,CAAH,CAA+B,CAC3B,MAAON,CAAAA,GAAG,CAACM,MAAD,CAAH,CAAY/B,IAAZ,CAAiB,SAAAC,CAAC,QAAIA,CAAAA,CAAC,CAACK,QAAF,CAAWkB,OAAX,CAAJ,EAAlB,CAAP,CACH,CACD,MAAOC,CAAAA,GAAG,CAACM,MAAD,CAAH,CAAYJ,WAAZ,GAA0BC,OAA1B,CAAkCJ,OAAO,CAACG,WAAR,EAAlC,EAA2D,CAAC,CAAnE,CACH,CANM,CAAP,CAOH,CARD,CAUA,GAAMM,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACC,KAAD,CAAQC,GAAR,CAAgB,CACrC,MAAOD,CAAAA,KAAK,CAACrC,MAAN,CAAa,SAACC,GAAD,CAAMiC,MAAN,CAAiB,CACjC,GAAIK,CAAAA,cAAc,CAAGJ,eAAe,CAACG,GAAD,CAAMJ,MAAN,CAApC,CACAjC,GAAG,CAACS,IAAJ,CAAS6B,cAAT,EACA,MAAOtC,CAAAA,GAAP,CACH,CAJM,CAIJ,EAJI,CAAP,CAKH,CAND,CAQA,GAAMuC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACH,KAAD,CAAQI,GAAR,CAAgB,CAClC,GAAIC,CAAAA,QAAQ,CAAG,IAAf,CACAD,GAAG,CAAClC,OAAJ,CAAY,SAAAoC,IAAI,CAAI,CAChB,GAAIA,IAAI,CAACC,MAAL,CAAc,CAAlB,CAAqB,CACjBF,QAAQ,CAAGA,QAAQ,EAAIC,IAAI,CAACxC,IAAL,CAAU,SAAAK,CAAC,QAAI6B,CAAAA,KAAK,CAACd,EAAN,GAAaf,CAAC,CAACe,EAAnB,EAAX,CAAvB,CACH,CACJ,CAJD,EAKA,MAAOmB,CAAAA,QAAP,CACH,CARD,CAUA,GAAMG,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,YAAD,CAAkB,CACjC,GAAM7C,CAAAA,GAAG,CAAG,EAAZ,CACA6C,YAAY,CAACvC,OAAb,CAAqB,SAAAkC,GAAG,CAAI,CACxBA,GAAG,CAAClC,OAAJ,CAAY,SAAA8B,KAAK,CAAI,CACjB,GAAIG,aAAa,CAACH,KAAD,CAAQS,YAAR,CAAjB,CACI,CAAC7C,GAAG,CAACE,IAAJ,CAAS,SAAA4C,GAAG,QAAIA,CAAAA,GAAG,CAACxB,EAAJ,GAAWc,KAAK,CAACd,EAArB,EAAZ,CAAD,EAAyCtB,GAAG,CAACS,IAAJ,CAAS2B,KAAT,CAAzC,CACP,CAHD,EAIH,CALD,EAOA,MAAOpC,CAAAA,GAAP,CACH,CAVD,CAYA,MAAO,IAAM+C,CAAAA,uBAAuB,CAAG,QAA1BA,CAAAA,uBAA0B,CAACC,cAAD,CAAoB,CACvD,GAAMC,CAAAA,QAAQ,CAAG,EAAjB,CACAD,cAAc,CAAC1C,OAAf,CAAuB,SAAC8B,KAAD,CAAQC,GAAR,CAAgB,CACnCY,QAAQ,CAACxC,IAAT,CAAc0B,gBAAgB,CAACC,KAAD,CAAQC,GAAR,CAAhB,CAA6Ba,IAA7B,EAAd,EACH,CAFD,EAGA,MAAON,CAAAA,UAAU,CAACK,QAAD,CAAjB,CACH,CANM","sourcesContent":["import data from \"../services/data.json\";\n\nconst getLabelOptions = (label, onSelectFilterOption) => {\n    return data.reduce((acc, option) => {\n        if (!acc.some(e => e.label === option[label]))\n            if(Array.isArray(option[label])) {\n                //going through array of skills\n                option[label].forEach(o => {\n                    if (!acc.some(e => e.label.includes(o)))\n                        acc.push({ label: o, onChange: onSelectFilterOption });\n                })\n            }\n            else \n                acc.push({ label: option[label], onChange: onSelectFilterOption });\n        return acc;\n    }, []);\n}\n\nexport const getAccordionFilters = () => {\n    const accordionFilters = new Map();\n\n    accordionFilters.set(\"location\", []);\n    accordionFilters.set(\"contract\", []);\n    accordionFilters.set(\"level\", []);\n    accordionFilters.set(\"skills\", []);\n\n    return accordionFilters;\n}\n\nexport const getAccordionOptions = (onSelectFilterOption, clearFilterActive) => {\n    const accordionFiltersMap = getAccordionFilters();\n    const accordionOptions = [...accordionFiltersMap.keys()];\n\n    return accordionOptions.map((option, index) => {\n        return { id: `${index}`, label: option, clearFilter: clearFilterActive, options: getLabelOptions(option, onSelectFilterOption) };\n    });\n}\n\nconst checkPositionAndCompany = (keyword, job) => {\n    return job.position.toLowerCase().indexOf(keyword.toLowerCase()) > -1 || job.company.toLowerCase().indexOf(keyword.toLowerCase()) > -1\n}\n\nexport const getSearchOptions = (keyword) => {\n    return data.filter((job) => checkPositionAndCompany(keyword, job));\n}\n\nconst checkJobsFilter = (filter, keyword) => {\n    return data.filter((job) => {\n        //going through array of skills\n        if(Array.isArray(job[filter])) {\n            return job[filter].some(e => e.includes(keyword))\n        }\n        return job[filter].toLowerCase().indexOf(keyword.toLowerCase()) > -1\n    });\n}\n\nconst getJobsByFilters = (value, key) => {\n    return value.reduce((acc, filter) => {\n        let filteredOption = checkJobsFilter(key, filter);\n        acc.push(filteredOption);\n        return acc;\n    }, []);\n}\n\nconst isUniqueValue = (value, arr) => {\n    let isUnique = true;\n    arr.forEach(arr1 => {\n        if (arr1.length > 0) {\n            isUnique = isUnique && arr1.some(o => value.id === o.id);\n        }\n    });\n    return isUnique;\n};\n\nconst uniqueJobs = (filteresJobs) => {\n    const acc = [];\n    filteresJobs.forEach(arr => {\n        arr.forEach(value => {\n            if (isUniqueValue(value, filteresJobs))\n                !acc.some(obj => obj.id === value.id) && acc.push(value);\n        })\n    })\n\n    return acc;\n}\n\nexport const getFilteredJobsByOption = (filterKeywords) => {\n    const filtered = [];\n    filterKeywords.forEach((value, key) => {\n        filtered.push(getJobsByFilters(value, key).flat());\n    });\n    return uniqueJobs(filtered);\n}"]},"metadata":{},"sourceType":"module"}