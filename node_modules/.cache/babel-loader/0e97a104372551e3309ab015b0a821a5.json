{"ast":null,"code":"import data from \"../services/data.json\";\n\nconst getLabelOptions = (label, onSelectFilterOption) => {\n  return data.reduce((acc, option) => {\n    if (!acc.some(e => e.label === option[label])) acc.push({\n      label: option[label],\n      onChange: onSelectFilterOption\n    });\n    return acc;\n  }, []);\n};\n\nexport const getAccordionOptions = onSelectFilterOption => {\n  const accordionOptions = [\"location\", \"contract\", \"level\"];\n  return accordionOptions.map((option, index) => {\n    return {\n      id: `${index}`,\n      label: option,\n      options: getLabelOptions(option, onSelectFilterOption)\n    };\n  });\n};\n\nconst checkPositionAndCompany = (keyword, job) => {\n  return job.position.toLowerCase().indexOf(keyword.toLowerCase()) > -1 || job.company.toLowerCase().indexOf(keyword.toLowerCase()) > -1;\n};\n\nexport const getSearchOptions = keyword => {\n  return data.filter(job => checkPositionAndCompany(keyword, job));\n};\nexport const getAccordionFilters = () => {\n  const accordionFilters = new Map();\n  accordionFilters.set(\"location\", []);\n  accordionFilters.set(\"contract\", []);\n  accordionFilters.set(\"level\", []);\n  return accordionFilters;\n};\n\nconst getJobsFromFilter = (key, keyword, acc) => {\n  return data.filter(job => job[key].toLowerCase().indexOf(keyword.toLowerCase()) > -1);\n};\n\nconst getJobsFromFilters = (value, key) => {\n  return value.reduce((acc, filter) => {\n    let filteredOption = getJobsFromFilter(key, filter, acc);\n    acc.push(filteredOption);\n    return acc;\n  }, []);\n};\n\nconst checkIfJobAlreadyAdded = (jobId, arr) => {\n  return arr.some(job => job.id === jobId);\n};\n\nexport const getFilteredOptions = filterKeywords => {\n  const res = [];\n  filterKeywords.forEach((value, key) => {\n    res.push(getJobsFromFilters(value, key));\n  });\n  console.log(res.flat());\n  return res; // return filterKeywords.reduce((acc, filter) => {\n  //     let filteredOption = [];\n  //     if(!acc.length)  \n  //         filteredOption = getFilteredOption(data, filter.optionSelected, filter.keyword);\n  //     else \n  //         filteredOption = getFilteredOption(acc, filter.optionSelected, filter.keyword);\n  //         console.log(filteredOption);\n  //     return filteredOption;\n  // }, [])\n};","map":{"version":3,"sources":["/Users/inescarneiro/Documents/Playground/interplanetary-job-board/src/utilities/utilities.tsx"],"names":["data","getLabelOptions","label","onSelectFilterOption","reduce","acc","option","some","e","push","onChange","getAccordionOptions","accordionOptions","map","index","id","options","checkPositionAndCompany","keyword","job","position","toLowerCase","indexOf","company","getSearchOptions","filter","getAccordionFilters","accordionFilters","Map","set","getJobsFromFilter","key","getJobsFromFilters","value","filteredOption","checkIfJobAlreadyAdded","jobId","arr","getFilteredOptions","filterKeywords","res","forEach","console","log","flat"],"mappings":"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","sourcesContent":["import data from \"../services/data.json\";\n\nconst getLabelOptions = (label, onSelectFilterOption) => {\n    return data.reduce((acc, option) => {\n        if (!acc.some(e => e.label === option[label]))\n            acc.push({label: option[label], onChange: onSelectFilterOption});\n\n        return acc;\n    }, []);\n}\n\nexport const getAccordionOptions = (onSelectFilterOption) => {\n    const accordionOptions = [\"location\", \"contract\", \"level\"];\n\n    return accordionOptions.map((option, index) => {\n        return {id: `${index}`, label: option, options: getLabelOptions(option, onSelectFilterOption)};\n    });\n}\n\nconst checkPositionAndCompany = (keyword, job) => {\n    return job.position.toLowerCase().indexOf(keyword.toLowerCase()) > -1 || job.company.toLowerCase().indexOf(keyword.toLowerCase()) > -1\n}\n\nexport const getSearchOptions = (keyword) => {\n    return data.filter((job) => checkPositionAndCompany(keyword, job));\n}\n\n\nexport const getAccordionFilters = () => {\n    const accordionFilters = new Map();\n\n    accordionFilters.set(\"location\", []);\n    accordionFilters.set(\"contract\", []);\n    accordionFilters.set(\"level\", []);\n\n    return accordionFilters;\n}\n\nconst getJobsFromFilter = (key, keyword, acc) => {\n    return data.filter((job) => job[key].toLowerCase().indexOf(keyword.toLowerCase()) > -1);\n}\n\nconst getJobsFromFilters = (value, key) => {\n    return value.reduce((acc, filter) => {\n                let filteredOption = getJobsFromFilter(key, filter, acc);\n                acc.push(filteredOption);\n                return acc;\n            }, []);\n}\n\nconst checkIfJobAlreadyAdded = (jobId, arr) => {\n    return arr.some(job => job.id === jobId);\n}\n\nexport const getFilteredOptions = (filterKeywords) => {\n    const res = [];\n    \n    filterKeywords.forEach((value, key) => {\n        res.push(getJobsFromFilters(value, key));\n      }\n    );\n    \n    console.log(res.flat());\n    return res;\n    // return filterKeywords.reduce((acc, filter) => {\n    //     let filteredOption = [];\n    //     if(!acc.length)  \n    //         filteredOption = getFilteredOption(data, filter.optionSelected, filter.keyword);\n    //     else \n    //         filteredOption = getFilteredOption(acc, filter.optionSelected, filter.keyword);\n    //         console.log(filteredOption);\n    //     return filteredOption;\n    // }, [])\n\n\n}"]},"metadata":{},"sourceType":"module"}