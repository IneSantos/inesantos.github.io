{"ast":null,"code":"var _jsxFileName = \"/Users/inescarneiro/Documents/Playground/interplanetary-job-board/src/views/board.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport BoardPage from \"../components/pages/board\";\nimport data from \"../services/data.json\";\nimport { getAccordionOptions, getSearchOptions } from \"../utilities/utilities\";\nimport \"normalize.css\";\nimport \"./board.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BoardView = () => {\n  _s();\n\n  const [input, setInput] = useState(\"\");\n  const [jobs, setJobs] = useState(data);\n  const [filterKeywords, setfilterKeywords] = useState([]);\n\n  const onSelectFilterOption = e => {\n    const optionSelected = e.target.getAttribute(\"data-parent\");\n    const keyword = e.target.name;\n\n    if (!filterKeywords.includes(keyword)) {\n      const newFilters = [...filterKeywords, keyword];\n      setfilterKeywords(newFilters); //console.log(getFilteredOptions(optionSelected, keyword))\n\n      console.log(filterKeywords);\n    } else {\n      setfilterKeywords(filterKeywords.filter(key => key !== data));\n      console.log(filterKeywords);\n    }\n  };\n\n  const handleSearch = e => {\n    const userInput = e.target.value;\n    setInput(userInput);\n    setJobs(getSearchOptions(userInput));\n  };\n\n  const clearAll = () => {\n    setfilterKeywords([]);\n  };\n\n  useEffect(() => {\n    console.log(filterKeywords);\n  }, [filterKeywords]);\n  return /*#__PURE__*/_jsxDEV(BoardPage, {\n    jobs: jobs,\n    accordionOptions: getAccordionOptions(onSelectFilterOption),\n    handleSearch: handleSearch,\n    searchInput: input\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 12\n  }, this);\n};\n\n_s(BoardView, \"K7wKmEq1CEQE0m7nZIwZWHBSamE=\");\n\n_c = BoardView;\nexport default BoardView;\n\nvar _c;\n\n$RefreshReg$(_c, \"BoardView\");","map":{"version":3,"sources":["/Users/inescarneiro/Documents/Playground/interplanetary-job-board/src/views/board.tsx"],"names":["useState","BoardPage","data","getAccordionOptions","getSearchOptions","BoardView","input","setInput","jobs","setJobs","filterKeywords","setfilterKeywords","onSelectFilterOption","e","optionSelected","target","getAttribute","keyword","name","includes","newFilters","console","log","filter","key","handleSearch","userInput","value","clearAll","useEffect"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,SAAP,MAAsB,2BAAtB;AACA,OAAOC,IAAP,MAAiB,uBAAjB;AACA,SAASC,mBAAT,EAA8BC,gBAA9B,QAA0E,wBAA1E;AACA,OAAO,eAAP;AACA,OAAO,aAAP;;;AAEA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AACpB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACQ,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAACE,IAAD,CAAhC;AACA,QAAM,CAACQ,cAAD,EAAiBC,iBAAjB,IAAsCX,QAAQ,CAAC,EAAD,CAApD;;AAEA,QAAMY,oBAAoB,GAAIC,CAAD,IAAO;AACjC,UAAMC,cAAc,GAAGD,CAAC,CAACE,MAAF,CAASC,YAAT,CAAsB,aAAtB,CAAvB;AACA,UAAMC,OAAO,GAAGJ,CAAC,CAACE,MAAF,CAASG,IAAzB;;AACA,QAAI,CAACR,cAAc,CAACS,QAAf,CAAwBF,OAAxB,CAAL,EAAuC;AACtC,YAAMG,UAAU,GAAG,CAAC,GAAGV,cAAJ,EAAoBO,OAApB,CAAnB;AACAN,MAAAA,iBAAiB,CAACS,UAAD,CAAjB,CAFsC,CAGtC;;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYZ,cAAZ;AACA,KALD,MAMK;AACJC,MAAAA,iBAAiB,CAACD,cAAc,CAACa,MAAf,CAAuBC,GAAD,IAASA,GAAG,KAAKtB,IAAvC,CAAD,CAAjB;AACAmB,MAAAA,OAAO,CAACC,GAAR,CAAYZ,cAAZ;AACA;AACH,GAbD;;AAeA,QAAMe,YAAY,GAAIZ,CAAD,IAAO;AACxB,UAAMa,SAAS,GAAGb,CAAC,CAACE,MAAF,CAASY,KAA3B;AACApB,IAAAA,QAAQ,CAACmB,SAAD,CAAR;AACAjB,IAAAA,OAAO,CAACL,gBAAgB,CAACsB,SAAD,CAAjB,CAAP;AACH,GAJD;;AAMA,QAAME,QAAQ,GAAG,MAAM;AACnBjB,IAAAA,iBAAiB,CAAC,EAAD,CAAjB;AACH,GAFD;;AAKAkB,EAAAA,SAAS,CAAC,MAAM;AACZR,IAAAA,OAAO,CAACC,GAAR,CAAYZ,cAAZ;AACH,GAFQ,EAEN,CAACA,cAAD,CAFM,CAAT;AAIA,sBAAO,QAAC,SAAD;AAAW,IAAA,IAAI,EAAEF,IAAjB;AAAuB,IAAA,gBAAgB,EAAEL,mBAAmB,CAACS,oBAAD,CAA5D;AAAoF,IAAA,YAAY,EAAEa,YAAlG;AAAgH,IAAA,WAAW,EAAEnB;AAA7H;AAAA;AAAA;AAAA;AAAA,UAAP;AACH,CApCD;;GAAMD,S;;KAAAA,S;AAsCN,eAAeA,SAAf","sourcesContent":["import { useState } from \"react\";\nimport BoardPage from \"../components/pages/board\";\nimport data from \"../services/data.json\";\nimport { getAccordionOptions, getSearchOptions, getFilteredOptions } from \"../utilities/utilities\";\nimport \"normalize.css\";\nimport \"./board.css\";\n\nconst BoardView = () => {\n    const [input, setInput] = useState(\"\");\n    const [jobs, setJobs] = useState(data);\n    const [filterKeywords, setfilterKeywords] = useState([]);\n\n    const onSelectFilterOption = (e) => {\n       const optionSelected = e.target.getAttribute(\"data-parent\");\n       const keyword = e.target.name;\n       if (!filterKeywords.includes(keyword)) {\n        const newFilters = [...filterKeywords, keyword];\n        setfilterKeywords(newFilters);\n        //console.log(getFilteredOptions(optionSelected, keyword))\n        console.log(filterKeywords);\n       }\n       else {\n        setfilterKeywords(filterKeywords.filter((key) => key !== data));\n        console.log(filterKeywords);\n       }\n    }\n\n    const handleSearch = (e) => {\n        const userInput = e.target.value;\n        setInput(userInput);\n        setJobs(getSearchOptions(userInput));\n    }\n\n    const clearAll = () => {\n        setfilterKeywords([]);\n    };\n\n\n    useEffect(() => {\n        console.log(filterKeywords);\n    }, [filterKeywords]);\n\n    return <BoardPage jobs={jobs} accordionOptions={getAccordionOptions(onSelectFilterOption)} handleSearch={handleSearch} searchInput={input}/>\n}\n\nexport default BoardView;"]},"metadata":{},"sourceType":"module"}