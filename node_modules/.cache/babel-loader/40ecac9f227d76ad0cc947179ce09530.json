{"ast":null,"code":"import data from \"../services/data.json\";\n\nconst getLabelOptions = (label, onSelectFilterOption) => {\n  return data.reduce((acc, option) => {\n    if (!acc.some(e => e.label.includes(option[label]))) if (Array.isArray(option[label])) {\n      option[label].forEach(o => {\n        if (!acc.some(e => e.label.includes(o))) acc.push({\n          label: o,\n          onChange: onSelectFilterOption\n        });\n      });\n    } else acc.push({\n      label: option[label],\n      onChange: onSelectFilterOption\n    });\n    console.log(\"acc\", acc);\n    return acc;\n  }, []);\n};\n\nexport const getAccordionFilters = () => {\n  const accordionFilters = new Map();\n  accordionFilters.set(\"location\", []);\n  accordionFilters.set(\"contract\", []);\n  accordionFilters.set(\"level\", []);\n  accordionFilters.set(\"languages\", []);\n  return accordionFilters;\n};\nexport const getAccordionOptions = onSelectFilterOption => {\n  const accordionFiltersMap = getAccordionFilters();\n  const accordionOptions = [...accordionFiltersMap.keys()];\n  return accordionOptions.map((option, index) => {\n    return {\n      id: `${index}`,\n      label: option,\n      options: getLabelOptions(option, onSelectFilterOption)\n    };\n  });\n};\n\nconst checkPositionAndCompany = (keyword, job) => {\n  return job.position.toLowerCase().indexOf(keyword.toLowerCase()) > -1 || job.company.toLowerCase().indexOf(keyword.toLowerCase()) > -1;\n};\n\nexport const getSearchOptions = keyword => {\n  return data.filter(job => checkPositionAndCompany(keyword, job));\n};\n\nconst checkJobsFilter = (filter, keyword) => {\n  return data.filter(job => job[filter].toLowerCase().indexOf(keyword.toLowerCase()) > -1);\n};\n\nconst getJobsByFilters = (value, key) => {\n  return value.reduce((acc, filter) => {\n    let filteredOption = checkJobsFilter(key, filter);\n    acc.push(filteredOption);\n    return acc;\n  }, []);\n};\n\nconst isUniqueValue = (value, arr) => {\n  let isUnique = true;\n  arr.forEach(arr1 => {\n    if (arr1.length > 0) {\n      isUnique = isUnique && arr1.some(o => value.id === o.id);\n    }\n  });\n  return isUnique;\n};\n\nconst uniqueJobs = filteresJobs => {\n  const acc = [];\n  filteresJobs.forEach(arr => {\n    arr.forEach(value => {\n      if (isUniqueValue(value, filteresJobs)) !acc.some(obj => obj.id === value.id) && acc.push(value);\n    });\n  });\n  return acc;\n};\n\nexport const getFilteredJobsByOption = filterKeywords => {\n  const filtered = [];\n  filterKeywords.forEach((value, key) => {\n    filtered.push(getJobsByFilters(value, key).flat());\n  });\n  return uniqueJobs(filtered);\n};","map":{"version":3,"sources":["/Users/inescarneiro/Documents/Playground/interplanetary-job-board/src/utilities/utilities.tsx"],"names":["data","getLabelOptions","label","onSelectFilterOption","reduce","acc","option","some","e","includes","Array","isArray","forEach","o","push","onChange","console","log","getAccordionFilters","accordionFilters","Map","set","getAccordionOptions","accordionFiltersMap","accordionOptions","keys","map","index","id","options","checkPositionAndCompany","keyword","job","position","toLowerCase","indexOf","company","getSearchOptions","filter","checkJobsFilter","getJobsByFilters","value","key","filteredOption","isUniqueValue","arr","isUnique","arr1","length","uniqueJobs","filteresJobs","obj","getFilteredJobsByOption","filterKeywords","filtered","flat"],"mappings":"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","sourcesContent":["import data from \"../services/data.json\";\n\nconst getLabelOptions = (label, onSelectFilterOption) => {\n    return data.reduce((acc, option) => {\n        if (!acc.some(e => e.label.includes(option[label])))\n            if(Array.isArray(option[label])) {\n                option[label].forEach(o => {\n                if (!acc.some(e => e.label.includes(o)))\n                    acc.push({ label: o, onChange: onSelectFilterOption });\n                })\n            }\n            else \n                acc.push({ label: option[label], onChange: onSelectFilterOption });\n\n        console.log(\"acc\", acc);\n        return acc;\n    }, []);\n}\n\nexport const getAccordionFilters = () => {\n    const accordionFilters = new Map();\n\n    accordionFilters.set(\"location\", []);\n    accordionFilters.set(\"contract\", []);\n    accordionFilters.set(\"level\", []);\n    accordionFilters.set(\"languages\", []);\n\n    return accordionFilters;\n}\n\nexport const getAccordionOptions = (onSelectFilterOption) => {\n    const accordionFiltersMap = getAccordionFilters();\n    const accordionOptions = [...accordionFiltersMap.keys()];\n\n    return accordionOptions.map((option, index) => {\n        return { id: `${index}`, label: option, options: getLabelOptions(option, onSelectFilterOption) };\n    });\n}\n\nconst checkPositionAndCompany = (keyword, job) => {\n    return job.position.toLowerCase().indexOf(keyword.toLowerCase()) > -1 || job.company.toLowerCase().indexOf(keyword.toLowerCase()) > -1\n}\n\nexport const getSearchOptions = (keyword) => {\n    return data.filter((job) => checkPositionAndCompany(keyword, job));\n}\n\nconst checkJobsFilter = (filter, keyword) => {\n    return data.filter((job) => job[filter].toLowerCase().indexOf(keyword.toLowerCase()) > -1);\n}\n\nconst getJobsByFilters = (value, key) => {\n    return value.reduce((acc, filter) => {\n        let filteredOption = checkJobsFilter(key, filter);\n        acc.push(filteredOption);\n        return acc;\n    }, []);\n}\n\nconst isUniqueValue = (value, arr) => {\n    let isUnique = true;\n    arr.forEach(arr1 => {\n        if (arr1.length > 0) {\n            isUnique = isUnique && arr1.some(o => value.id === o.id);\n        }\n    });\n    return isUnique;\n};\n\nconst uniqueJobs = (filteresJobs) => {\n    const acc = [];\n    filteresJobs.forEach(arr => {\n        arr.forEach(value => {\n            if (isUniqueValue(value, filteresJobs))\n                !acc.some(obj => obj.id === value.id) && acc.push(value);\n        })\n    })\n\n    return acc;\n}\n\nexport const getFilteredJobsByOption = (filterKeywords) => {\n    const filtered = [];\n    filterKeywords.forEach((value, key) => {\n        filtered.push(getJobsByFilters(value, key).flat());\n    });\n    return uniqueJobs(filtered);\n}"]},"metadata":{},"sourceType":"module"}