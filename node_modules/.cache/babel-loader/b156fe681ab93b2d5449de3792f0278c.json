{"ast":null,"code":"var _jsxFileName = \"/Users/inescarneiro/Documents/Playground/interplanetary-job-board/src/views/board.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport BoardPage from \"../components/pages/board\";\nimport data from \"../services/data.json\";\nimport { getAccordionOptions, getSearchOptions, getFilteredOptions, getAccordionFilters } from \"../utilities/utilities\";\nimport \"normalize.css\";\nimport \"./board.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BoardView = () => {\n  _s();\n\n  const [input, setInput] = useState(\"\");\n  const [jobs, setJobs] = useState(data);\n  const [filterKeywords, setfilterKeywords] = useState(getAccordionFilters);\n\n  const onSelectFilterOption = e => {\n    const optionSelected = e.target.getAttribute(\"data-parent\");\n    const keyword = e.target.name;\n\n    if (!filterKeywords.some(key => key.keyword === keyword)) {\n      setfilterKeywords([...filterKeywords, {\n        keyword,\n        optionSelected\n      }]);\n    } else {\n      setfilterKeywords(filterKeywords.filter(key => key.keyword !== keyword));\n    }\n  };\n\n  const handleSearch = e => {\n    const userInput = e.target.value;\n    setInput(userInput);\n    setJobs(getSearchOptions(userInput));\n  };\n\n  const clearAll = () => {\n    setfilterKeywords([]);\n  };\n\n  useEffect(() => {\n    const filteredOptions = getFilteredOptions(filterKeywords).flat();\n    if (filteredOptions.length) setJobs(filteredOptions);else // error case\n      setJobs(data);\n  }, [filterKeywords]);\n  return /*#__PURE__*/_jsxDEV(BoardPage, {\n    jobs: jobs,\n    accordionOptions: getAccordionOptions(onSelectFilterOption),\n    handleSearch: handleSearch,\n    searchInput: input\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 12\n  }, this);\n};\n\n_s(BoardView, \"yMt3QEz/XqHkYZUmMixgO98sOjQ=\");\n\n_c = BoardView;\nexport default BoardView;\n\nvar _c;\n\n$RefreshReg$(_c, \"BoardView\");","map":{"version":3,"sources":["/Users/inescarneiro/Documents/Playground/interplanetary-job-board/src/views/board.tsx"],"names":["useState","useEffect","BoardPage","data","getAccordionOptions","getSearchOptions","getFilteredOptions","getAccordionFilters","BoardView","input","setInput","jobs","setJobs","filterKeywords","setfilterKeywords","onSelectFilterOption","e","optionSelected","target","getAttribute","keyword","name","some","key","filter","handleSearch","userInput","value","clearAll","filteredOptions","flat","length"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,SAAP,MAAsB,2BAAtB;AACA,OAAOC,IAAP,MAAiB,uBAAjB;AACA,SAASC,mBAAT,EAA8BC,gBAA9B,EAAgDC,kBAAhD,EAAoEC,mBAApE,QAA+F,wBAA/F;AACA,OAAO,eAAP;AACA,OAAO,aAAP;;;AAEA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AACpB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACW,IAAD,EAAOC,OAAP,IAAkBZ,QAAQ,CAACG,IAAD,CAAhC;AACA,QAAM,CAACU,cAAD,EAAiBC,iBAAjB,IAAsCd,QAAQ,CAACO,mBAAD,CAApD;;AAEA,QAAMQ,oBAAoB,GAAIC,CAAD,IAAO;AACjC,UAAMC,cAAc,GAAGD,CAAC,CAACE,MAAF,CAASC,YAAT,CAAsB,aAAtB,CAAvB;AACA,UAAMC,OAAO,GAAGJ,CAAC,CAACE,MAAF,CAASG,IAAzB;;AACA,QAAI,CAACR,cAAc,CAACS,IAAf,CAAoBC,GAAG,IAAIA,GAAG,CAACH,OAAJ,KAAgBA,OAA3C,CAAL,EAA0D;AACzDN,MAAAA,iBAAiB,CAAC,CAAC,GAAGD,cAAJ,EAAoB;AAACO,QAAAA,OAAD;AAAUH,QAAAA;AAAV,OAApB,CAAD,CAAjB;AACA,KAFD,MAGK;AACJH,MAAAA,iBAAiB,CAACD,cAAc,CAACW,MAAf,CAAuBD,GAAD,IAASA,GAAG,CAACH,OAAJ,KAAgBA,OAA/C,CAAD,CAAjB;AACA;AACH,GATD;;AAWA,QAAMK,YAAY,GAAIT,CAAD,IAAO;AACxB,UAAMU,SAAS,GAAGV,CAAC,CAACE,MAAF,CAASS,KAA3B;AACAjB,IAAAA,QAAQ,CAACgB,SAAD,CAAR;AACAd,IAAAA,OAAO,CAACP,gBAAgB,CAACqB,SAAD,CAAjB,CAAP;AACH,GAJD;;AAMA,QAAME,QAAQ,GAAG,MAAM;AACnBd,IAAAA,iBAAiB,CAAC,EAAD,CAAjB;AACH,GAFD;;AAKAb,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAM4B,eAAe,GAAGvB,kBAAkB,CAACO,cAAD,CAAlB,CAAmCiB,IAAnC,EAAxB;AAEA,QAAGD,eAAe,CAACE,MAAnB,EACInB,OAAO,CAACiB,eAAD,CAAP,CADJ,KAEK;AACDjB,MAAAA,OAAO,CAACT,IAAD,CAAP;AACP,GAPQ,EAON,CAACU,cAAD,CAPM,CAAT;AASA,sBAAO,QAAC,SAAD;AAAW,IAAA,IAAI,EAAEF,IAAjB;AAAuB,IAAA,gBAAgB,EAAEP,mBAAmB,CAACW,oBAAD,CAA5D;AAAoF,IAAA,YAAY,EAAEU,YAAlG;AAAgH,IAAA,WAAW,EAAEhB;AAA7H;AAAA;AAAA;AAAA;AAAA,UAAP;AACH,CArCD;;GAAMD,S;;KAAAA,S;AAuCN,eAAeA,SAAf","sourcesContent":["import { useState, useEffect } from \"react\";\nimport BoardPage from \"../components/pages/board\";\nimport data from \"../services/data.json\";\nimport { getAccordionOptions, getSearchOptions, getFilteredOptions, getAccordionFilters } from \"../utilities/utilities\";\nimport \"normalize.css\";\nimport \"./board.css\";\n\nconst BoardView = () => {\n    const [input, setInput] = useState(\"\");\n    const [jobs, setJobs] = useState(data);\n    const [filterKeywords, setfilterKeywords] = useState(getAccordionFilters);\n\n    const onSelectFilterOption = (e) => {\n       const optionSelected = e.target.getAttribute(\"data-parent\");\n       const keyword = e.target.name;\n       if (!filterKeywords.some(key => key.keyword === keyword)) {\n        setfilterKeywords([...filterKeywords, {keyword, optionSelected}]);\n       }\n       else {\n        setfilterKeywords(filterKeywords.filter((key) => key.keyword !== keyword));\n       }\n    }\n\n    const handleSearch = (e) => {\n        const userInput = e.target.value;\n        setInput(userInput);\n        setJobs(getSearchOptions(userInput));\n    }\n\n    const clearAll = () => {\n        setfilterKeywords([]);\n    };\n\n\n    useEffect(() => {\n        const filteredOptions = getFilteredOptions(filterKeywords).flat();\n\n        if(filteredOptions.length) \n            setJobs(filteredOptions);\n        else // error case\n            setJobs(data);\n    }, [filterKeywords]);\n\n    return <BoardPage jobs={jobs} accordionOptions={getAccordionOptions(onSelectFilterOption)} handleSearch={handleSearch} searchInput={input}/>\n}\n\nexport default BoardView;"]},"metadata":{},"sourceType":"module"}