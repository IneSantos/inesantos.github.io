{"ast":null,"code":"import data from \"../services/data.json\";\n\nconst getLabelOptions = (label, onSelectFilterOption) => {\n  return data.reduce((acc, option) => {\n    if (!acc.some(e => e.label === option[label])) acc.push({\n      label: option[label],\n      onChange: onSelectFilterOption\n    });\n    return acc;\n  }, []);\n};\n\nexport const getAccordionFilters = () => {\n  const accordionFilters = new Map();\n  accordionFilters.set(\"location\", []);\n  accordionFilters.set(\"contract\", []);\n  accordionFilters.set(\"level\", []);\n  return accordionFilters;\n};\nexport const getAccordionOptions = onSelectFilterOption => {\n  const accordionOptions = [\"location\", \"contract\", \"level\"];\n  return accordionOptions.map((option, index) => {\n    return {\n      id: `${index}`,\n      label: option,\n      options: getLabelOptions(option, onSelectFilterOption)\n    };\n  });\n};\n\nconst checkPositionAndCompany = (keyword, job) => {\n  return job.position.toLowerCase().indexOf(keyword.toLowerCase()) > -1 || job.company.toLowerCase().indexOf(keyword.toLowerCase()) > -1;\n};\n\nexport const getSearchOptions = keyword => {\n  return data.filter(job => checkPositionAndCompany(keyword, job));\n};\n\nconst getJobsFromFilter = (key, keyword) => {\n  return data.filter(job => job[key].toLowerCase().indexOf(keyword.toLowerCase()) > -1);\n};\n\nconst getJobsFromFilters = (value, key) => {\n  return value.reduce((acc, filter) => {\n    let filteredOption = getJobsFromFilter(key, filter);\n    acc.push(filteredOption);\n    return acc;\n  }, []);\n}; // const removeDuplicates = (arr) => {\n//     return arr.reduce((acc, o) => {\n//         if(!acc.some(obj => obj.id === o.id)) {\n//           acc.push(o);\n//         }\n//         return acc;\n//     },[]);\n// }\n\n\nconst isUniqueValue = (value, arr) => {\n  let isUnique = true;\n  arr.forEach(arr1 => {\n    if (arr1.length > 0) {\n      isUnique = isUnique && arr1.some(o => value.id === o.id);\n    }\n  });\n  return isUnique;\n};\n\nconst uniqueJobs = filteresJobs => {\n  const acc = [];\n  filteresJobs.forEach(arr => {\n    arr.forEach(value => {\n      if (isUniqueValue(value, filteresJobs)) !acc.some(obj => obj.id === value.id) && acc.push(value);\n    });\n  });\n  return acc;\n};\n\nexport const getFilteredJobsByOption = filterKeywords => {\n  const res = [];\n  filterKeywords.forEach((value, key) => {\n    // res.push(data.filter((d) => {\n    //     console.log(d[key]);\n    //     return  values.includes(d[key]);\n    // }));\n    // values.reduce((acc, value) => {\n    //     acc.push(data.filter((d) => {\n    //         console.log(value);\n    //         return  d[key] === key\n    //      }));\n    //      return acc;\n    // }, [])\n    res.push(getJobsFromFilters(value, key).flat());\n  }); // console.log(\"res\", uniqueJobs(res));\n\n  return uniqueJobs(res); // return filterKeywords.reduce((acc, filter) => {\n  //     let filteredOption = [];\n  //     if(!acc.length)  \n  //         filteredOption = getFilteredOption(data, filter.optionSelected, filter.keyword);\n  //     else \n  //         filteredOption = getFilteredOption(acc, filter.optionSelected, filter.keyword);\n  //         console.log(filteredOption);\n  //     return filteredOption;\n  // }, [])\n};\nexport const newIdea2 = (keyword, filterOption, filteredData) => {\n  return filteredData.filter(d => {\n    return d[filterOption] === keyword;\n  });\n};","map":{"version":3,"sources":["/Users/inescarneiro/Documents/Playground/interplanetary-job-board/src/utilities/utilities.tsx"],"names":["data","getLabelOptions","label","onSelectFilterOption","reduce","acc","option","some","e","push","onChange","getAccordionFilters","accordionFilters","Map","set","getAccordionOptions","accordionOptions","map","index","id","options","checkPositionAndCompany","keyword","job","position","toLowerCase","indexOf","company","getSearchOptions","filter","getJobsFromFilter","key","getJobsFromFilters","value","filteredOption","isUniqueValue","arr","isUnique","forEach","arr1","length","o","uniqueJobs","filteresJobs","obj","getFilteredJobsByOption","filterKeywords","res","flat","newIdea2","filterOption","filteredData","d"],"mappings":"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","sourcesContent":["import data from \"../services/data.json\";\n\nconst getLabelOptions = (label, onSelectFilterOption) => {\n    return data.reduce((acc, option) => {\n        if (!acc.some(e => e.label === option[label]))\n            acc.push({ label: option[label], onChange: onSelectFilterOption });\n\n        return acc;\n    }, []);\n}\n\nexport const getAccordionFilters = () => {\n    const accordionFilters = new Map();\n\n    accordionFilters.set(\"location\", []);\n    accordionFilters.set(\"contract\", []);\n    accordionFilters.set(\"level\", []);\n\n    return accordionFilters;\n}\n\nexport const getAccordionOptions = (onSelectFilterOption) => {\n    const accordionOptions = [\"location\", \"contract\", \"level\"];\n\n    return accordionOptions.map((option, index) => {\n        return { id: `${index}`, label: option, options: getLabelOptions(option, onSelectFilterOption) };\n    });\n}\n\nconst checkPositionAndCompany = (keyword, job) => {\n    return job.position.toLowerCase().indexOf(keyword.toLowerCase()) > -1 || job.company.toLowerCase().indexOf(keyword.toLowerCase()) > -1\n}\n\nexport const getSearchOptions = (keyword) => {\n    return data.filter((job) => checkPositionAndCompany(keyword, job));\n}\n\nconst getJobsFromFilter = (key, keyword) => {\n    return data.filter((job) => job[key].toLowerCase().indexOf(keyword.toLowerCase()) > -1);\n}\n\nconst getJobsFromFilters = (value, key) => {\n    return value.reduce((acc, filter) => {\n        let filteredOption = getJobsFromFilter(key, filter);\n        acc.push(filteredOption);\n        return acc;\n    }, []);\n}\n\n// const removeDuplicates = (arr) => {\n//     return arr.reduce((acc, o) => {\n//         if(!acc.some(obj => obj.id === o.id)) {\n//           acc.push(o);\n//         }\n//         return acc;\n//     },[]);\n// }\n\nconst isUniqueValue = (value, arr) => {\n    let isUnique = true;\n    arr.forEach(arr1 => {\n        if (arr1.length > 0) {\n            isUnique = isUnique && arr1.some(o => value.id === o.id);\n        }\n    });\n    return isUnique;\n};\n\nconst uniqueJobs = (filteresJobs) => {\n    const acc = [];\n    filteresJobs.forEach(arr => {\n        arr.forEach(value => {\n            if (isUniqueValue(value, filteresJobs))\n                !acc.some(obj => obj.id === value.id) && acc.push(value);\n        })\n    })\n\n    return acc;\n}\n\nexport const getFilteredJobsByOption = (filterKeywords) => {\n    const res = [];\n    filterKeywords.forEach((value, key) => {\n        // res.push(data.filter((d) => {\n        //     console.log(d[key]);\n        //     return  values.includes(d[key]);\n        // }));\n\n        // values.reduce((acc, value) => {\n\n        //     acc.push(data.filter((d) => {\n        //         console.log(value);\n        //         return  d[key] === key\n        //      }));\n\n        //      return acc;\n        // }, [])\n        res.push(getJobsFromFilters(value, key).flat());\n    }\n    );\n\n    // console.log(\"res\", uniqueJobs(res));\n\n    return uniqueJobs(res);\n    // return filterKeywords.reduce((acc, filter) => {\n    //     let filteredOption = [];\n    //     if(!acc.length)  \n    //         filteredOption = getFilteredOption(data, filter.optionSelected, filter.keyword);\n    //     else \n    //         filteredOption = getFilteredOption(acc, filter.optionSelected, filter.keyword);\n    //         console.log(filteredOption);\n    //     return filteredOption;\n    // }, [])\n}\n\nexport const newIdea2 = (keyword, filterOption, filteredData) => {\n    return filteredData.filter((d) => {\n        return d[filterOption] === keyword\n    });\n}"]},"metadata":{},"sourceType":"module"}